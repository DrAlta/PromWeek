<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:prom="PromWeek.*" xmlns:util="com.util.*"
		 creationComplete="onCreationComplete()">
		 
		 <fx:Metadata>
		 </fx:Metadata>
		 
		 <fx:Declarations>
		 </fx:Declarations>
		 
		
		 
		<s:HGroup id="initiatorSelectionGroup" />
		 
	<fx:Script>
		<![CDATA[
		import flash.events.Event;
		import flash.events.MouseEvent;
		import flash.ui.Mouse;
		import mx.effects.Glow;
		import PromWeek.assets.ResourceLibrary;
		import CiF.Debug;
		public var rL:ResourceLibrary;
		
		public var currentlySelected:String;
		
		public var charFaceButtons:Vector.<NEW_charFaceButton>;
		
		public function onCreationComplete():void 
		{
			rL = ResourceLibrary.getInstance();
			
			charFaceButtons = new Vector.<NEW_charFaceButton>();
			
			this.addEventListener("INIT_FACE_CLICKED",charFaceClickedEvent);
		}
		
		public function deselectAll():void
		{
			for each (var charFaceButton:NEW_charFaceButton in this.charFaceButtons)
			{
				charFaceButton.selected = false;
			}
		}
		
		public function charFaceClickedEvent(e:Event = null, charName1:String = "", switchingChar:Boolean = false):void 
		{
			var charName:String;
			if (e == null)
			{
				charName = charName1;
			}
			else
			{
				charName = e.target.charName;
			}
			Debug.debug(this, "charFaceClickedEvent " + charName + " clicked!");
			
			GameEngine.getInstance().hudGroup.responderSubjectiveThoughtBubble.visible = false;
			GameEngine.getInstance().hudGroup.responderSubjectiveThoughtBubble.top = GameEngine.getInstance().hudGroup.defaultResponderSubjectThoughtBubbleTop;
			GameEngine.getInstance().hudGroup.responderThoughtBubble.visible = false;
			GameEngine.getInstance().hudGroup.initiatorSelectedComponent.initiatorThoughtBubble.visible = false;
			if (!switchingChar)
			{
				GameEngine.getInstance().hudGroup.initiatorSelectedComponent.switchCharButton.visible = false;
			}
			
			for each (var charFaceButton:NEW_charFaceButton in this.charFaceButtons)
			{
				if (charFaceButton.charName == charName)
				{
					charFaceButton.selected = true;
				}
				else
				{
					charFaceButton.selected = false;
				}
			}
			this.currentlySelected = charName;
		}
		
		public function populateFromCast(names:Vector.<String>,size:Number=55):void 
		{
			for each (var name:String in names)
			{
				var charFaceButton:PromWeek.NEW_charFaceButton = new PromWeek.NEW_charFaceButton();
				charFaceButton.charName = name;
				charFaceButton.mode = "initiator";
				charFaceButton.width = size;
				charFaceButton.height = size;
				this.initiatorSelectionGroup.addElement(charFaceButton);
				charFaceButtons.push(charFaceButton);
			}
			
		}

		
		
		]]>
			
	</fx:Script>
	

</s:Group>