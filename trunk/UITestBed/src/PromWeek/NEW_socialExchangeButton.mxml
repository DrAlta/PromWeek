<?xml version="1.0" encoding="utf-8"?>
<s:Button xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 creationComplete="onCreationComplete()"
		 xmlns:prom="PromWeek.*" xmlns:util="com.util.*"
		 click="onClickHandler(event)"
		 skinClass="PromWeek.skins.NEW_socialExchangeButtonSkin" >

		 
	 <fx:Metadata>
	 </fx:Metadata>
	 
	 <fx:Declarations>
		 <fx:Boolean id="locked">false</fx:Boolean>
		 <fx:Boolean id="isChangeResponse">false</fx:Boolean>
	 </fx:Declarations>
		 
    <s:states>
		<!-- Not used -->
		 <s:State name="up" />
		 <s:State name="over" />
		 <s:State name="down" />
		 <s:State name="disabled" />
		 
		 <!-- Used -->
		 <s:State name="unlockedOver" />
		 <s:State name="unlockedUp" />
		 <s:State name="unlockedDown" />
		 <s:State name="lockedOver" />
		 <s:State name="lockedUp" />
		 <s:State name="lockedDown" />
    </s:states>
		 
	<fx:Script>
		<![CDATA[
			import flash.events.MouseEvent;
		
			private var _sgName:String;
			public var isOver:Boolean;
			public var isMouseDown:Boolean;
		
			private var jpm:JuicePointManager;
			
			private var phantomJuiceIsOn:Boolean = false;
			
			public function onCreationComplete():void
			{
				jpm = JuicePointManager.getInstance();
				
				this.addEventListener(MouseEvent.MOUSE_OVER, onMouseOver);
				this.addEventListener(MouseEvent.MOUSE_OUT, onMouseOut);
				this.addEventListener(MouseEvent.MOUSE_DOWN, onMouseDown);
				this.addEventListener(MouseEvent.MOUSE_UP, onMouseUp);
				this.addEventListener(MouseEvent.CLICK, onClickHandler);
			}
			
			public function onClickHandler(e:MouseEvent):void
			{
				if (this.locked)
				{
					var cost:Number;
					if (this.isChangeResponse) //in the responder thought bubble
					{
						//cost = jpm.getCostForSwitchOutcome(null);
						if (jpm.activateOppositeResponderReaction("", "", "", null))
						{
							this.locked = false;
							GameEngine.getInstance().hudGroup.topBar.juiceBar.phantomJuiceHide();							
						}
					}
					else
					{				
						//Normal social exchange buttons
						cost = jpm.computeJuicePointCostOfNonTopSG(0, 0);
						if (jpm.handleNonTopSocialGameSelection(cost, "", "", ""))
						{
							this.locked = false;
							GameEngine.getInstance().hudGroup.topBar.juiceBar.phantomJuiceHide();
						}
					}
				}
				
				
				this.invalidateSkinState();
				
			}
			
			public function set sgName(str:String):void
			{
				_sgName = str;
				this.label = str;
			}
			
			public function get sgName():String
			{
				return _sgName;
			}
			
			private function onMouseOver(e:MouseEvent):void 
			{
				if (this.locked)
				{
					if (this.isChangeResponse)
					{
						GameEngine.getInstance().hudGroup.topBar.juiceBar.phantomJuiceBar(jpm.getCostForSwitchOutcome(null));
					}
					else
					{
						GameEngine.getInstance().hudGroup.topBar.juiceBar.phantomJuiceBar(jpm.computeJuicePointCostOfNonTopSG(0, 0));
					}
					phantomJuiceIsOn = true;
				}
				
				isOver = true;
				invalidateSkinState();
			}
			
			private function onMouseOut(e:MouseEvent):void 
			{
				if (phantomJuiceIsOn)
				{
					GameEngine.getInstance().hudGroup.topBar.juiceBar.phantomJuiceHide();
					phantomJuiceIsOn = false;
				}
				
				isOver = false;
				this.isMouseDown = false;
				invalidateSkinState();
			}
			
			private function onMouseDown(e:MouseEvent):void 
			{
				this.isMouseDown = true;
				invalidateSkinState();
			}
			
			private function onMouseUp(e:MouseEvent):void 
			{
				this.isMouseDown = false;
				invalidateSkinState();
			}
			
			//Returns which skin state we want to be looking at.
			override protected function getCurrentSkinState():String 
			{
				if (this.locked)
				{
					if (this.isMouseDown)
					{
						return "lockedDown";
					}
					else
					{
						if (this.isOver)
						{
							return "lockedOver";
						}
						else
						{
							return "lockedUp";
						}
					}
				}
				else
				{
					if (this.isMouseDown)
					{
						return "unlockedDown";
					}
					else
					{
						if (this.isOver)
						{
							return "unlockedOver";
						}
						else
						{
							return "unlockedUp";
						}
					}					
				}
			}
		]]>

	</fx:Script>
	
</s:Button>