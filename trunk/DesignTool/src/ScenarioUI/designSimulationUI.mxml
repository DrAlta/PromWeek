<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:ScenarioUI="ScenarioUI.*"
		 xmlns:CiF="CiF.*"
		 contentBackgroundColor="#101010" contentBackgroundAlpha="0.6"
		 width="1280" height="800">
		 
	<fx:Metadata>
		[Event(name="socialGameClickedOn", type="flash.events.Event")] 
	</fx:Metadata>
		 
	<fx:Declarations>
		<CiF:Character id="selectedCharacter" />
	</fx:Declarations>
	
	<fx:Binding source="characterState.selectedCharacter" destination="this.selectedCharacter" />
	<fx:Binding source="this.selectedCharacter" destination="availableGames.selectedCharacter" />
	
	<mx:TabNavigator  width="100%" height="100%">
		<s:NavigatorContent label="Social Game Simulator" width="100%" height="100%" >
			<s:Rect y="-10" width="100%" height="100%">
				<s:fill>
						<s:LinearGradient rotation="90">
						<s:entries>
							<s:GradientEntry color="#989898" ratio="0.0" alpha="1.0"/>
							<s:GradientEntry color="#101010" ratio="1.0" alpha="1.0"/>
						</s:entries>
					</s:LinearGradient>
				</s:fill>
			</s:Rect>
			<s:HGroup>
				<s:VGroup>
					<ScenarioUI:skeinNavigationBar id="skeinNav" contentBackgroundAlpha="0.49" />
					<ScenarioUI:characterState id="characterState" />
			
				</s:VGroup>
				 
				<s:VGroup>
					<ScenarioUI:socialGamesPlayed id="availableGames" height="350" contentBackgroundAlpha="0.51" contentBackgroundColor="#FFFFFF" click="printGameInfo(event)" />

					<s:HGroup>
						<s:Button label="Run Selected Social Game" id="runSelectedSGButton" click="onClickRunSelectedSGButton(event)" />
						<s:Button label="Update Weights" id="updateWeights" click="updateWeightsClick(event)" />
					</s:HGroup>
					<s:Scroller width="100%" height="350">
									   
						<s:Group id="dialogueDisplayGroup">
							
							<s:Rect width="100%" height="1500">
								<s:fill>
									<mx:SolidColor color="0xffffff" />
								</s:fill>
							</s:Rect>
							<s:VGroup>
								<s:RichText id="titleIntentAndEffectsText" top="0" left="0" paddingLeft="3" width="425" />
									
								<mx:Accordion id="initRulesAccordian" creationPolicy="all" >								
									<mx:VBox label="MT True" width="100%" height="150">
										<mx:DataGrid id="initTrueEditableMTRuleListDG" width="415" height="100%" editable="true" itemEditEnd="initTrueEditableMTRuleListItemEditEndHandler(event)" horizontalScrollPolicy="on">
											<mx:columns>
												<mx:DataGridColumn width="60" dataField="weightValue" editorDataField="value" headerText="Weight" editable="true" >
													<mx:itemEditor>
														<fx:Component>
															<mx:NumericStepper minimum="-100" maximum="100" />
														</fx:Component>
													</mx:itemEditor>
												</mx:DataGridColumn>
												<mx:DataGridColumn width="140" dataField="mtNameString" headerText="MT Name" editable="false" />
												<mx:DataGridColumn width="2000" dataField="ruleString" headerText="Rule" editable="false" />
												<mx:DataGridColumn width="2000" dataField="ruleID" headerText="Rule ID" visible="false" editable="false" />
											</mx:columns>
										</mx:DataGrid>
									</mx:VBox>
									<mx:VBox label="SG True" width="100%" height="150">
										<mx:DataGrid id="initTrueEditableSGRuleListDG" width="415" height="100%" editable="true" itemEditEnd="initTrueEditableSGRuleListItemEditEndHandler(event)" horizontalScrollPolicy="on">
											<mx:columns>
												<mx:DataGridColumn width="60" dataField="weightValue" editorDataField="value" headerText="Weight" editable="true" >
													<mx:itemEditor>
														<fx:Component>
															<mx:NumericStepper minimum="-100" maximum="100" />
														</fx:Component>
													</mx:itemEditor>
												</mx:DataGridColumn>
												<mx:DataGridColumn width="2000" dataField="ruleString" headerText="Rule" editable="false" />
												<mx:DataGridColumn width="2000" dataField="ruleID" headerText="Rule ID" visible="false" editable="false" />
											</mx:columns>
										</mx:DataGrid>
									</mx:VBox>
									<mx:VBox label="SG False" width="100%" height="150">
										<mx:DataGrid id="initFalseEditableSGRuleListDG" width="415" height="100%" editable="true" itemEditEnd="initFalseEditableSGRuleListItemEditEndHandler(event)" horizontalScrollPolicy="on">
											<mx:columns>
												<mx:DataGridColumn width="60" dataField="weightValue" editorDataField="value" headerText="Weight" editable="true" >
													<mx:itemEditor>
														<fx:Component>
															<mx:NumericStepper minimum="-100" maximum="100" />
														</fx:Component>
													</mx:itemEditor>
												</mx:DataGridColumn>
												<mx:DataGridColumn width="2000" dataField="ruleString" headerText="Rule" editable="false" />
												<mx:DataGridColumn width="2000" dataField="ruleID" headerText="Rule ID" visible="false" editable="false" />
											</mx:columns>
										</mx:DataGrid>
									</mx:VBox>	
								</mx:Accordion>
								
								
								<s:RichText id="respTitleText" top="0" left="0" paddingLeft="3" width="425" />
								
								<mx:Accordion id="RespRulesAccordian" creationPolicy="all" > 
									<mx:VBox label="MT True" width="100%" height="100%">
										<mx:DataGrid id="respTrueEditableMTRuleListDG" width="415" height="100%" editable="true" itemEditEnd="respTrueEditableMTRuleListItemEditEndHandler(event)" horizontalScrollPolicy="on">
											<mx:columns>
												<mx:DataGridColumn width="60" dataField="weightValue" editorDataField="value" headerText="Weight" editable="true" >
													<mx:itemEditor>
														<fx:Component>
															<mx:NumericStepper minimum="-100" maximum="100" />
														</fx:Component>
													</mx:itemEditor>
												</mx:DataGridColumn>
												<mx:DataGridColumn width="140" dataField="mtNameString" headerText="MT Name" editable="false" />
												<mx:DataGridColumn width="2000" dataField="ruleString" headerText="Rule" editable="false" />
												<mx:DataGridColumn width="2000" dataField="ruleID" headerText="Rule ID" visible="false" editable="false" />
											</mx:columns>
										</mx:DataGrid>
									</mx:VBox>
									<mx:VBox label="SG True" width="100%" height="100%">
										<mx:DataGrid id="respTrueEditableSGRuleListDG" width="415" height="100%" editable="true" itemEditEnd="respTrueEditableSGRuleListItemEditEndHandler(event)" horizontalScrollPolicy="on">
											<mx:columns>
												<mx:DataGridColumn width="60" dataField="weightValue" editorDataField="value" headerText="Weight" editable="true" >
													<mx:itemEditor>
														<fx:Component>
															<mx:NumericStepper minimum="-100" maximum="100" />
														</fx:Component>
													</mx:itemEditor>
												</mx:DataGridColumn>
												<mx:DataGridColumn width="2000" dataField="ruleString" headerText="Rule" editable="false" />
												<mx:DataGridColumn width="2000" dataField="ruleID" headerText="Rule ID" visible="false" editable="false" />
											</mx:columns>
										</mx:DataGrid>
									</mx:VBox>
									<mx:VBox label="SG False" width="100%" height="100%">
										<mx:DataGrid id="respFalseEditableSGRuleListDG" width="415" height="100%" editable="true" itemEditEnd="respFalseEditableSGRuleListItemEditEndHandler(event)" horizontalScrollPolicy="on">
											<mx:columns>
												<mx:DataGridColumn width="60" dataField="weightValue" editorDataField="value" headerText="Weight" editable="true" >
													<mx:itemEditor>
														<fx:Component>
															<mx:NumericStepper minimum="-100" maximum="100" />
														</fx:Component>
													</mx:itemEditor>
												</mx:DataGridColumn>
												<mx:DataGridColumn width="2000" dataField="ruleString" headerText="Rule" editable="false" />
												<mx:DataGridColumn width="2000" dataField="ruleID" headerText="Rule ID" visible="false" editable="false" />
											</mx:columns>
										</mx:DataGrid>
									</mx:VBox>
								</mx:Accordion>
									
								<s:RichText id="dialogueDisplay" top="0" left="0" paddingLeft="3" width="425" />
								
							</s:VGroup>
						</s:Group>
					</s:Scroller>
				</s:VGroup>
			</s:HGroup>
		</s:NavigatorContent>
		<s:NavigatorContent label="Skein" width="100%" height="100%">
			<mx:Canvas id="skeinGroup">
				
			</mx:Canvas>
		</s:NavigatorContent>
	</mx:TabNavigator>
	

	<fx:Script>
		<![CDATA[
		import air.update.utils.StringUtils;
		import CiF.Character;
		import CiF.CiFSingleton;
		import CiF.Debug;
		import CiF.Effect;
		import CiF.GameScore;
		import CiF.InfluenceRule;
		import CiF.Instantiation;
		import CiF.LineOfDialogue;
		import CiF.Microtheory;
		import CiF.Predicate;
		import CiF.Rule;
		import CiF.SocialGame;
		import CiF.SocialGameContext;
		import flash.utils.Dictionary;
		import flashx.textLayout.utils.CharacterUtil;
		import mx.collections.ArrayCollection;
		import mx.controls.NumericStepper;
		import mx.events.DataGridEvent;
		import mx.controls.Alert;
		//import mx.events.MouseEvent;
		//import flare.vis.data.Data;
		//import flare.vis.Visualization;
		import flash.events.DataEvent;
		import flash.events.Event;
		import flash.events.MouseEvent;
		import flash.geom.Rectangle;
		import flashx.textLayout.conversion.TextConverter;
		import spark.primitives.Line;
		//import flashx.textLayout.formats.LineBreak;
		//import flash.text.engine.*;
		
		//private var vis:Visualization;
		
		public var runningSocialGame:SocialGame;
		public var runningMicrotheoryLibrary:Vector.<Microtheory>;
		
		/**
		 * A set of stories for the desing UI to utilize.
		 */
		public var stories:Vector.<Story>;
		/**
		 * The currnetly-loaded story.
		 */
		public var curStory:Story;
		/**
		 * The current level loaded in the design UI.
		 */
		public var curLevel:Level;
		
		
		/*		
		private function visualize(data:Data):void {
			vis = new Visualization(data);
			vis.bounds = new Rectangle(0, 0, 600, 600);
			this.skeinGroup.addChild(vis);
		}
		*/
		public function onCreationComplete():void 
		{
			this.stories = new Vector.<Story>();
			this.addEventListener(CharacterRepresentationSelectedEvent.CHARACTER_REPRESENTATION_SELECTED, this.onCharacterRepresentationSelected);
			this.addEventListener("LevelLoaded", this.onLevelLoadedEvent);
			//the gameConfig.xml loading on the initialization of the design tool is happening before we
			//get to this creationComplete Event. Call the function manually for now to bootstrap the level
			//cast loading process.
			//this.onLevelLoadedEvent();
			//availableGames.socialGamesList.addEventListener(MouseEvent.CLICK, printGameInfo);
			
			//dialogueDisplay.setStyle("lineBreak", LineBreak.TO_FIT);
			//dialogueDisplay.setStyle("breakOpportunity", BreakOpportunity.ANY);
			//setStateForNextRound();
			//this.visualize(getData());
		}
		
		/**
		 * This function responds to the the LevelLoaded, which fires everytime a new
		 * level is loaded into the designUI. The cast shown in the characterState and
		 * in the CharacterRepresentations should change to be that of the cast of the
		 * new level.
		 * 
		 * @param	e	The incoming LevelLoaded Event.
		 */
		public function onLevelLoadedEvent(e:Event=null):void {
			//load new cast in characterState
			Debug.debug(this, "onLevelLoadedevent() reached event: " + e.toString());
			this.characterState.levelCast = this.curLevel.cast;
			this.characterState.setUp();
		}
		
		public function getData():XML {
			var cif:CiFSingleton = CiFSingleton.getInstance();
			return cif.socialGamesLib.toXMLString() as XML;
		}
		
		public function traceDisplayList(container:DisplayObjectContainer, indentString:String = ""):void 
		{ 
			var child:DisplayObject; 
			for (var i:uint=0; i < container.numChildren; i++) 
			{ 
				child = container.getChildAt(i); 
				trace(indentString, /*child,*/ child.name);  
				if (container.getChildAt(i) is DisplayObjectContainer) 
				{ 
					traceDisplayList(DisplayObjectContainer(child), indentString + "    ") 
				} 
			} 
		}
		
		/**
		 * Prepares the game state and the UI for the next round of social game
		 * simulation.
		 */
		public function setStateForNextRound():void {
			//hold old social network display information
			//var networkShown:String = this.characterState.networkTypeButtonBar.selectedItem as String;
			
			
			var cif:CiFSingleton = CiFSingleton.getInstance();
			cif.formIntent(this.selectedCharacter);
			this.availableGames.updateSocialGamesDP();
			
			
			this.characterState.updateNetworkRepresentation();

			if (this.characterState.relationshipToggle)
			{
				this.characterState.clearRelationshipIcons();
				this.characterState.drawRelationshipIcons();
			}
			
			this.characterState.updateCharacterDPs();
			
			//this.characterState.setUp();
			//restore the social network display settings
			//this.characterState.selectedCharacter = this.selectedCharacter;
			//this.characterState.networkTypeButtonBar.selectedItem = networkShown;
		}
		
		/**
		 * The click event handler for the runSelectedSGButton. The social game
		 * selected in the available games UI is ran, the world state is updated,
		 * the skein is updated, and the performance realization result of the
		 * game is placed in the dialogueDisply RichText object.
		 * @param	event	The click event.
		 */
		public function onClickRunSelectedSGButton(event:MouseEvent):void {
			var cif:CiFSingleton = CiFSingleton.getInstance();
			
			var initiator:Character = this.selectedCharacter;
			var responder:Character = this.availableGames.responder;
			var sg:SocialGame = this.availableGames.selectedSocialGame;
			//var context:SocialGameContext = cif.sfdb.contexts[cif.sfdb.contexts.length - 1] as SocialGameContext;;
			var other:Character;// = cif.cast.getCharByName(context.other);
			
			printGameInfo(event, true);
			
			//play the game
			cif.playGame(sg, initiator, responder);
			
			this.setStateForNextRound();
		}
		
		
		public function printGameInfo(e:Event, gamePlayed:Boolean = false):void
		{
			if (!availableGames.socialGamesList.selectedItem) return;
			
			var htmlText:String = "";
			var initiator:Character = this.selectedCharacter;
			var responder:Character = this.availableGames.responder;
			var other:Character;
			var cif:CiFSingleton = CiFSingleton.getInstance();
			var sg:SocialGame = this.availableGames.selectedSocialGame;
			//var context:SocialGameContext;
			var instantiation:Instantiation;
			var infRule :InfluenceRule;
			var line:LineOfDialogue;
			var realizedLine:LineOfDialogue;
			var primarySpeaker:String;
			//flag error if we do not have two characters to play with
			if (!initiator || !responder) {
				htmlText = "Roles are not fully specified: ";
				if (!initiator) {
					htmlText += "initiator ";
				}
				if (!responder) {
					htmlText += "responder";
				}
				this.dialogueDisplay.text = htmlText;
				return;
			}

			
			//context = cif.sfdb.contexts[cif.sfdb.contexts.length - 1] as SocialGameContext;
			//Debug.debug(this, "onCurrentStateChange() effectIndex: " + context.effectIndex);
			var resultsDictionary:Dictionary = cif.getSalientOtherAndEffect(sg,true,initiator,responder);
			other = resultsDictionary["other"];
			var effect:Effect = resultsDictionary["effect"];//cif.getSalientEffect(sg, responderScore>=0, initiator, responder, other);
			
			
			var theory:Microtheory;
			var tmpString:String;
			//var effect:Effect = sg.effects[context.effectIndex];
			var responderScore:Number = cif.scoreResponderWithMicrotheories(sg, initiator, responder, other);
			var initiatorScore:Number = cif.scoreInitiatorWithMicrotheories(sg, initiator, responder, other);
			
			
			runningSocialGame = sg.clone();
			runningMicrotheoryLibrary = new Vector.<Microtheory>();
			for each(theory in cif.microtheories)
			{
				runningMicrotheoryLibrary.push(theory.clone());
			}
			
			//Debug.debug(this, "printGameInfo() salient effect: " + effect.toString() + " with instantiation id: " + effect.id);

			if (sg.instantiations.length > 0)
			{
				instantiation = sg.getInstantiationById(effect.instantiationID);
			}
			else 
			{
				instantiation = null;
			}
			
			
			if (gamePlayed)
			{
				htmlText += "<br><b>--- " + initiator.characterName + " played " + sg.name + " with " + responder.characterName + " ---</b><br><br>";
			}
			else
			{
				htmlText += "<br><b> Information for " + sg.name + " between " + initiator.characterName + " " + responder.characterName + "</b><br><br>";
			}
			
			htmlText += "<b>*** SFDB Time ***</b> <br>";
			htmlText += cif.time + "<br><br>";
			
			htmlText += "<b>*** Intent ***</b> <br>";
			for each ( var intent:CiF.Rule in sg.intents)
			{
				htmlText += intent.toString() + "<br>";
			}
			
			//Add the logic description of the effect change rule
			htmlText += "<br>";
			htmlText += "<b>*** ";
			if (!gamePlayed) htmlText += "Would be "; 
			htmlText += "Results *** </b> <br>";
			//htmlText += effect.change.predicates.length.toString() + "<br>";
			for each (var predicate:Predicate in effect.change.predicates)
			{
				tmpString = replace(predicate.toString(),"responder", responder.characterName);
				tmpString = replace(tmpString, "initiator", initiator.characterName);
				htmlText +=  "* " + tmpString + "<br>";
			}
			htmlText += "<br>";
			htmlText += "<b>*** Effect Info ***</b> <br>";
			if (effect.isAccept)
			{
				htmlText += "Accept <br>";
			}
			else
			{
				htmlText += "Reject <br>";
			}
			for each (predicate in effect.condition.predicates)
			{
				tmpString = replace(predicate.toString(),"responder", responder.characterName);
				tmpString = replace(tmpString, "initiator", initiator.characterName);
				htmlText +=  "* " + tmpString + "<br>";
			}
			
			
			
			
			var i:int = 0;
			
			htmlText += "<br>";
			htmlText += "<b>*** Initiator IRS ***</b> <br>";
			
			titleIntentAndEffectsText.textFlow = TextConverter.importToFlow(htmlText, TextConverter.TEXT_FIELD_HTML_FORMAT);
			htmlText = "";
			
			
			var initTrueEditableSGRuleListDP:ArrayCollection = new ArrayCollection;
			//for each (infRule in sg.initiatorIRS.influenceRules)
			for (i = 0; i < sg.initiatorIRS.influenceRules.length; i++)			
			{
				infRule = sg.initiatorIRS.influenceRules[i];
				if (infRule.weight != 0)
				{
					if (sg.initiatorIRS.getlastTruthValues()[i])
					{
						initTrueEditableSGRuleListDP.addItem( { weightValue:infRule.weight , ruleString:(infRule as Rule).toString(), ruleID:infRule.id } );
					}
				}
			}
			initTrueEditableSGRuleListDG.dataProvider = initTrueEditableSGRuleListDP;
			
			var initFalseEditableSGRuleListDP:ArrayCollection = new ArrayCollection;
			//for each (infRule in sg.initiatorIRS.influenceRules)
			for (i = 0; i < sg.initiatorIRS.influenceRules.length; i++)			
			{
				infRule = sg.initiatorIRS.influenceRules[i];
				if (infRule.weight != 0)
				{
					if (!sg.initiatorIRS.getlastTruthValues()[i])
					{
						initFalseEditableSGRuleListDP.addItem( { weightValue:infRule.weight , ruleString:(infRule as Rule).toString(), ruleID:infRule.id } );
					}
				}
			}
			initFalseEditableSGRuleListDG.dataProvider = initFalseEditableSGRuleListDP;
			
			var initTrueEditableMTRuleListDP:ArrayCollection = new ArrayCollection;
			for each (theory in cif.microtheories)
			{
				for (i = 0; i < theory.initiatorIRS.influenceRules.length; i++)
				{
					if (theory.initiatorIRS.influenceRules[i].weight != 0)
					{
						if (theory.initiatorIRS.getlastTruthValues()[i])
						{
							initTrueEditableMTRuleListDP.addItem( { weightValue:theory.initiatorIRS.lastScores[i] , mtNameString:theory.name, ruleString:(theory.initiatorIRS.influenceRules[i] as Rule).toString(), ruleID:theory.initiatorIRS.influenceRules[i].id } );
						}
					}
				}
			}
			initTrueEditableMTRuleListDG.dataProvider = initTrueEditableMTRuleListDP;
			

			
			
			htmlText += "<br>";
			htmlText += "<b>*** Responder IRS ***</b> <br>";
			
			respTitleText.textFlow = TextConverter.importToFlow(htmlText, TextConverter.TEXT_FIELD_HTML_FORMAT);
			htmlText = "";
			
			
			
			
			
			
			
			
			var respTrueEditableSGRuleListDP:ArrayCollection = new ArrayCollection;
			//for each (infRule in sg.responderIRS.influenceRules)
			for (i = 0; i < sg.responderIRS.influenceRules.length; i++)			
			{
				infRule = sg.responderIRS.influenceRules[i];
				if (infRule.weight != 0)
				{
					if (sg.responderIRS.getlastTruthValues()[i])
					{
						respTrueEditableSGRuleListDP.addItem( { weightValue:infRule.weight , ruleString:(infRule as Rule).toString() , ruleID:infRule.id} );
					}
				}
			}
			respTrueEditableSGRuleListDG.dataProvider = respTrueEditableSGRuleListDP;
			
			var respTrueEditableMTRuleListDP:ArrayCollection = new ArrayCollection
			for each (theory in cif.microtheories)
			{
				for (i = 0; i < theory.responderIRS.influenceRules.length; i++)
				{
					if (theory.responderIRS.influenceRules[i].weight != 0)
					{
						if (theory.responderIRS.getlastTruthValues()[i])
						{
							respTrueEditableMTRuleListDP.addItem( { weightValue:theory.initiatorIRS.influenceRules[i].weight , mtNameString:theory.name, ruleString:(theory.initiatorIRS.influenceRules[i] as Rule).toString(), ruleID:theory.initiatorIRS.influenceRules[i].id } );
						}
					}
				}
			}
			respTrueEditableMTRuleListDG.dataProvider = respTrueEditableMTRuleListDP;
			
			var respFalseEditableSGRuleListDP:ArrayCollection = new ArrayCollection;
			//for each (infRule in sg.responderIRS.influenceRules)
			for (i = 0; i < sg.responderIRS.influenceRules.length; i++)			
			{
				infRule = sg.responderIRS.influenceRules[i];
				if (infRule.weight != 0)
				{
					if (!sg.responderIRS.getlastTruthValues()[i])
					{
						respFalseEditableSGRuleListDP.addItem( { weightValue:infRule.weight , ruleString:(infRule as Rule).toString(), ruleID:infRule.id } );
					}
				}
			}
			respFalseEditableSGRuleListDG.dataProvider = respFalseEditableSGRuleListDP;
	
			
			
			
			
			
			
			
			

			htmlText += "<br>";
			htmlText += "<b>*** Preconditions ***</b> <br>";
			for (i = 0; i < sg.preconditions.length; i++)
			{
					tmpString = sg.preconditions[i].toString().replace("responder", responder.characterName);
					tmpString = tmpString.replace("initiator", initiator.characterName);
					htmlText +=  "* " + tmpString + "<br>";
			}			
			
			//dialogue 
			if (instantiation != null)
			{
				htmlText += "<br>";
				htmlText += "<b>Dialogue:</b>";
				
				
				
				//var context:SocialGameContext = cif.sfdb.contexts[cif.sfdb.contexts.length - 1] as SocialGameContext;
				
				if (this.availableGames.socialGamesList.selectedItem.otherCol)
				{
					Debug.debug(this, (this.availableGames.socialGamesList.selectedItem.otherCol as Character).characterName);
				}
				//else
				//{
					//Debug.debug(this,"There is no OTHER");
				//}
				
				var newInstantiation:Instantiation = instantiation.realizeDialogue(initiator, responder, (this.availableGames.socialGamesList.selectedItem.otherCol as Character));
				
				//create the formatted display string
				for each(line in newInstantiation.lines) {
					//realizedLine = line.realizeDialogue(initiator, responder, other);
					//Debug.debug(this, "onClickRunSelectedSGButton() line: " + line.toString());
					//Debug.debug(this, "onClickRunSelectedSGButton() realizedLine: " + realizedLine.toString());
					//add the primary speaker's line first
					if (line.primarySpeaker == "initiator") {
						htmlText += "<p><b>" + initiator.characterName + ":</b> ";
						//htmlText += realizedLine.initiatorLine + "</p>";
						htmlText += line.initiatorLine + "</p>";
					} else if (line.primarySpeaker == "responder") {
						htmlText += "<p><b>" + responder.characterName + ":</b> ";
						//htmlText += realizedLine.responderLine + "</p>";
						htmlText += line.responderLine + "</p>";
					}else if (other) {
						if (line.primarySpeaker == "other") {
							htmlText += "<p><b>" + other.characterName + ":</b> ";
							//htmlText += realizedLine.otherLine + "</p>";
							htmlText += line.otherLine + "</p>";
						}
					}
				
					
					//add the other lines
					if ("initiator" != line.primarySpeaker) {
						htmlText += "<p><i>" + initiator.characterName + ":</i>";
						htmlText += line.initiatorLine + "</p>";
					}
					if ("responder" != line.primarySpeaker) {
						htmlText += "<p><i>" + responder.characterName + ":</i>";
						htmlText += line.responderLine + "</p>";
					}
					if (other) {
						if ("other" != line.primarySpeaker) {
							htmlText += "<p><i>" + other.characterName + ":</i>";
							htmlText += line.otherLine + "</p>";
						}
					}
					
					//add a space between the lines
					htmlText += "<p/>";
				}
			}
						
			//Debug.debug(this, "onClickRunSelectedSGButton() htmlText: " + htmlText);
			//htmlText = "<p>The quick brown <b>fox jumps over</b> the lazy dogg.</p>";
			this.dialogueDisplay.textFlow = TextConverter.importToFlow(htmlText, TextConverter.TEXT_FIELD_HTML_FORMAT);
		}
		
		public function initTrueEditableSGRuleListItemEditEndHandler(event:DataGridEvent):void
		{
			//update the working social game that gets created every time a social game is clicked on.
			if (initTrueEditableSGRuleListDG.selectedIndex > 0)//runningSocialGame.initiatorIRS.influenceRules.length )
			{
				var newRule:InfluenceRule = runningSocialGame.initiatorIRS.getRuleByID(event.itemRenderer.data.ruleID).clone() as InfluenceRule;
				newRule.weight = (initTrueEditableSGRuleListDG.itemEditorInstance as NumericStepper).value;
				runningSocialGame.initiatorIRS.replaceRuleAtID(event.itemRenderer.data.ruleID, newRule);
			}
		}

		public function initFalseEditableSGRuleListItemEditEndHandler(event:DataGridEvent):void
		{
			//update the working social game that gets created every time a social game is clicked on.
			if (initFalseEditableSGRuleListDG.selectedIndex < runningSocialGame.initiatorIRS.influenceRules.length )
			{
				var newRule:InfluenceRule = runningSocialGame.initiatorIRS.getRuleByID(event.itemRenderer.data.ruleID).clone() as InfluenceRule;
				newRule.weight = (initFalseEditableSGRuleListDG.itemEditorInstance as NumericStepper).value;
				runningSocialGame.initiatorIRS.replaceRuleAtID(event.itemRenderer.data.ruleID, newRule);
			}
		}
		
		public function initTrueEditableMTRuleListItemEditEndHandler(event:DataGridEvent):void
		{
			//I want to find the microtheory that has the same name as the selectedIndex in the runningMicrotheories and replace
			var mtName:String = event.itemRenderer.data.mtNameString;
			//Debug.debug(this, "initTrueEditableMTRuleListItemEditEndHandler() edited "+mtName);
			var influenceRule:InfluenceRule;
			var i:int = 0;
			for each (var theory:Microtheory in runningMicrotheoryLibrary)
			{
				if (theory.name == mtName)
				{
					for (i = 0; i < theory.initiatorIRS.influenceRules.length; i++ )
					{
						influenceRule = theory.initiatorIRS.influenceRules[i];
						if (influenceRule.id == event.itemRenderer.data.ruleID)
						{
							//Debug.debug(this, "FOUND A MATCH!")
							var newRule:InfluenceRule = theory.initiatorIRS.getRuleByID(influenceRule.id).clone() as InfluenceRule;
							newRule.weight = (initTrueEditableMTRuleListDG.itemEditorInstance as NumericStepper).value;
							theory.initiatorIRS.replaceRuleAtID(influenceRule.id, newRule.clone() as InfluenceRule);
							theory.responderIRS.replaceRuleAtID(influenceRule.id, newRule.clone() as InfluenceRule);
							return;
						}
					}
				}
			}
		}
		
		public function respTrueEditableSGRuleListItemEditEndHandler(event:DataGridEvent):void
		{
			//update the working social game that gets created every time a social game is clicked on.
			if (respTrueEditableSGRuleListDG.selectedIndex < runningSocialGame.responderIRS.influenceRules.length )
			{
				var newRule:InfluenceRule = runningSocialGame.responderIRS.getRuleByID(event.itemRenderer.data.ruleID).clone() as InfluenceRule;
				newRule.weight = (respTrueEditableSGRuleListDG.itemEditorInstance as NumericStepper).value;
				runningSocialGame.responderIRS.replaceRuleAtID(event.itemRenderer.data.ruleID, newRule);
			}
		}

		public function respFalseEditableSGRuleListItemEditEndHandler(event:DataGridEvent):void
		{
			//update the working social game that gets created every time a social game is clicked on.
			if (respFalseEditableSGRuleListDG.selectedIndex < runningSocialGame.initiatorIRS.influenceRules.length )
			{
				var newRule:InfluenceRule = runningSocialGame.responderIRS.getRuleByID(event.itemRenderer.data.ruleID).clone() as InfluenceRule;
				newRule.weight = (respFalseEditableSGRuleListDG.itemEditorInstance as NumericStepper).value;
				runningSocialGame.responderIRS.replaceRuleAtID(event.itemRenderer.data.ruleID, newRule);
			}
		}
		
		public function respTrueEditableMTRuleListItemEditEndHandler(event:DataGridEvent):void
		{
			//I want to find the microtheory that has the same name as the selectedIndex in the runningMicrotheories and replace
			var mtName:String = event.itemRenderer.data.mtNameString;
			//Debug.debug(this, "initTrueEditableMTRuleListItemEditEndHandler() edited "+mtName);
			var influenceRule:InfluenceRule;
			var i:int = 0;
			for each (var theory:Microtheory in runningMicrotheoryLibrary)
			{
				if (theory.name == mtName)
				{
					for each (influenceRule in theory.responderIRS.influenceRules)
					{
						if (influenceRule.id == event.itemRenderer.data.ruleID)
						{
							var newRule:InfluenceRule = theory.responderIRS.getRuleByID(influenceRule.id).clone() as InfluenceRule;
							newRule.weight = (respTrueEditableMTRuleListDG.itemEditorInstance as NumericStepper).value;
							theory.initiatorIRS.replaceRuleAtID(influenceRule.id, newRule.clone() as InfluenceRule);
							theory.responderIRS.replaceRuleAtID(influenceRule.id, newRule.clone() as InfluenceRule);
							return;
						}
					}
				}
			}
		}
		
		
		public function updateWeightsClick(e:MouseEvent):void
		{
			var cif:CiFSingleton = CiFSingleton.getInstance();
			
			for (var i:int = 0; i < cif.socialGamesLib.games.length; i++ )
			{
				if (cif.socialGamesLib.games[i].name == runningSocialGame.name)
				{
					cif.socialGamesLib.games[i] = runningSocialGame.clone();
					break;
				}
			}
			
			//replace the microtheory library with the one we've been updating
			cif.microtheories = runningMicrotheoryLibrary;
			
			Alert.show("CiF microtheories and current Social Game\nupdated with changes to weights\n\nRemember you still need to save this out to file \nto REALLY save the changes!");
		}
		
		public function replace(org:String, fnd:String, rpl:String):String 
		{
			return org.split(fnd).join(rpl);
		}
		
		
		/**
		 * The callback function for the onCharacterRepresentationSelected
		 * event. 
		 * @param	event
		 */
		public function onCharacterRepresentationSelected(event:CharacterRepresentationSelectedEvent):void 
		{
			Debug.debug(this, "onCharacterRepresentationSelected() in design simulation ui.");
			
			availableGames.onSelectedCharacterChange(event.selectedChar);
		}
		]]>
	</fx:Script>

	
	
</s:Group>
