<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:ScenarioUI="ScenarioUI.*"
		 xmlns:CiF="CiF.*" 
		 contentBackgroundColor="#FFFFFF">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<CiF:Character id="selectedCharacter" />
		
	</fx:Declarations>
	
<!--	
	<mx:DataGrid id="socialGamesList" x="0" y="79" width="100%" height="100%" >
		<mx:columns>
			<mx:DataGridColumn headerText="Social Game Name" dataField="socialGameNameCol" width="{socialGamesList.width * 0.35}" />
			<mx:DataGridColumn headerText="Who to Play With" dataField="whoWithCol" width="{socialGamesList.width * 0.15}" />
			<mx:DataGridColumn headerText="Volition" dataField="volitionCol" width="{socialGamesList.width * 0.1}" />
			<mx:DataGridColumn headerText="Responder Value" dataField="responderValueCol" width="{socialGamesList.width * 0.2}" />
			<mx:DataGridColumn headerText="Effect" dataField="effectChosenCol" width="{socialGamesList.width * 0.1 }" />
		</mx:columns>
	</mx:DataGrid>
-->
	<mx:AdvancedDataGrid id="socialGamesList" x="0" y="79" width="100%" height="100%" >
		<mx:columns>
			<mx:AdvancedDataGridColumn headerText="Social Game Name" dataField="socialGameNameCol" width="{socialGamesList.width * 0.35}" />
			<mx:AdvancedDataGridColumn headerText="Who to Play With" dataField="whoWithCol" width="{socialGamesList.width * 0.15}" />
			<mx:AdvancedDataGridColumn headerText="Volition" dataField="volitionCol" width="{socialGamesList.width * 0.1}" />
			<mx:AdvancedDataGridColumn headerText="Responder Value" dataField="responderValueCol" width="{socialGamesList.width * 0.2}" />
			<mx:AdvancedDataGridColumn headerText="Effect" dataField="effectChosenCol" width="{socialGamesList.width * 0.1 }" />
			<mx:AdvancedDataGridColumn headerText="Other" dataField="otherCol" visible="false" />
		</mx:columns>
	</mx:AdvancedDataGrid>
	<s:Group x="0" y="-1" width="100%" height="81">
		<s:BorderContainer x="0" y="0" width="100%" height="34" borderWeight="2">
			<s:Label x="76" y="10" text="Search:" width="43"/>
			<s:TextInput x="125" y="4" width="200" text="Type your search here!"/>
		</s:BorderContainer>
		<s:BorderContainer x="0" y="32" width="100%" height="49">
			<s:Label text="Filter by Game:" x="6" y="15"/>
			<s:Label x="211" text="Filter By Character:" y="15"/>
			<s:DropDownList x="92" y="9" id="filterByGameDropdown"></s:DropDownList>
			<s:DropDownList x="319" y="10" id="filterByCharacterDropdown"></s:DropDownList>
		</s:BorderContainer>
	</s:Group>
	
	
	<fx:Script>
		<![CDATA[
		import flash.events.Event;
		import flash.utils.Dictionary;
		import mx.collections.ArrayCollection;
		import mx.collections.Sort;
		import mx.collections.SortField;
		import ScenarioUI.*;
		import CiF.*;
		
		private var cif:CiFSingleton = CiFSingleton.getInstance();
		
		private var socialGamesDP:ArrayCollection = new ArrayCollection;
		
		public function onCreationComplete():void 
		{
			this.socialGamesDP = new ArrayCollection;
		}
		
		public function onSelectedCharacterChange(char:Character):void
		{
			this.selectedCharacter = char;
			cif.formIntent(selectedCharacter);
			updateSocialGamesDP();
		}
		
		/**
		 * Finds the responder by doing a name lookup of the "play game with"
		 * column of the availableGames UI.
		 * @return The character data structure corresponding to the responder.
		 */
		public function get responder():Character {
			//Debug.debug(this, "responder() socialGamesList.selectedItem: " + this.socialGamesList.selectedItem.whoWithCol);
			return cif.cast.getCharByName(this.socialGamesList.selectedItem.whoWithCol);
		}
		
		/**
		 * Returns the social game corresponding to the selected column of the
		 * available games list.
		 */
		public function get selectedSocialGame():SocialGame {
			return cif.socialGamesLib.getByName(this.socialGamesList.selectedItem.socialGameNameCol);
		}
		
		public function updateSocialGamesDP():void 
		{
			this.socialGamesDP.removeAll();

					//this.selectedStatusesDP.addItem(Status.getStatusNameByNumber(status.type) + " toward " + status.directedToward);
					//wantsForList.push({name: want1.what, theWant:want1});
			
			var gameScores:Vector.<GameScore> = selectedCharacter.prospectiveMemory.getHighestGameScores(100);
			var sgArrayForList:Array = new Array();
			var responder:Character;
			var other:Character;
			var responderScore:Number;
			var sg:SocialGame;
			var effect:Effect;
			for each (var gs:GameScore in gameScores)
			{
				//Debug.debug(this, "updateSocialGamesDP() gamescore: " + gs.toXMLString());
				//sgArrayForList.push({socialGameNameCol:gs.name , whoWithCol:gs.responder, volitionCol:gs.score, responderValueCol:"respVal", effectChosenCol:"effect"});
				sg = cif.socialGamesLib.getByName(gs.name);
				responder = cif.cast.getCharByName(gs.responder);
				var resultsDictionary:Dictionary = cif.getSalientOtherAndEffect(sg, true, selectedCharacter, responder);
				other = resultsDictionary["other"];
				responderScore = cif.scoreResponderWithMicrotheories(sg, selectedCharacter, responder, other);//sg.getResponderScore(selectedCharacter, responder, other);
				effect = cif.getSalientEffect(sg, responderScore>=0, selectedCharacter, responder, other);
				
				//Debug.debug(this, "updateSocialGamesDP() sg: " + sg.toXMLString());
				//Debug.debug(this, "updateSocialGamesDP() gs: " + gs.toString());
				
				this.socialGamesDP.addItem( { socialGameNameCol:gs.name , whoWithCol:gs.responder, volitionCol:gs.score, responderValueCol:responderScore, effectChosenCol:effect.id, otherCol:other } );
			}
			
			var sortThese:Sort = new Sort();
			sortThese.fields = [new SortField("whoWithCol", true, false), new SortField("volitionCol", true, true,true)];
			this.socialGamesDP.sort= sortThese;
			this.socialGamesDP.refresh();
			
			//this.socialGamesDP.addItem(sgArrayForList);// = new ArrayCollection(sgArrayForList);
			
			//reset data providers to force change event
			this.socialGamesList.dataProvider = this.socialGamesDP;
		}

		

		
		]]>
	</fx:Script>
	
</s:Group>