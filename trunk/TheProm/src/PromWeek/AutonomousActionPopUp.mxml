<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:prom="PromWeek.*" xmlns:util="com.util.*"
		 creationComplete="onCreationComplete()"
		 initialize="initializeGoalUpdates()"
		 styleName="classicPromWeek"
		 width="{getStyle('updateWidth')}"
		 height="{getStyle('updateHeight')}">
		 
		 <fx:Metadata>
		 </fx:Metadata>
		 
		 <fx:Declarations>
		 </fx:Declarations>
		 
		 <s:Group id="autoPopUpWindow" width="100%" height="100%">
			<s:Rect width="100%" height="100%" maxHeight="100" radiusX="8" radiusY="8">
				<s:stroke>
					<s:SolidColorStroke weight="{getStyle('windowStrokeWeight')}" color="{getStyle('backgroundStroke')}" />
				</s:stroke>
				<s:fill>
					<s:SolidColor color="{getStyle('updateBGColor')}" alpha="1.0"/>
				</s:fill>
			</s:Rect>
			<s:VGroup id="highestGroup" width="100%" height="100%" paddingTop="5" paddingLeft="5" paddingRight="5" paddingBottom="5">
				<s:HGroup id="onTopGroup" width="100%" height="25" gap="24">
					<util:SmoothImage id="initiatorImage" width="25" height="25"></util:SmoothImage>
					<s:RichText id="characterNameRichText" color="{getStyle('contentAreaTextColor')}" fontSize="11" width="55" height="100%" verticalAlign="middle" textAlign="center" styleName="basicFontStyle" />
					<!--<mx:Spacer width="50"></mx:Spacer>-->
					<s:Group width="70" height="100%">
						<s:Rect width="100%" height="100%" maxHeight="100">
							<s:fill>
								<s:SolidColor color="red" alpha="1.0"/>
							</s:fill>
						</s:Rect>					
						<s:RichText text="Auto Action" fontSize="10" color="{getStyle('contentAreaTextColor')}" width="100%" height="100%" verticalAlign="middle" textAlign="center" styleName="basicFontStyle"/>
					</s:Group>
				</s:HGroup>
				<s:Group id="feedLine" width="100%" height="45"> <!--height="{highestGroup.height - onTopGroup.height}">-->
					<s:RichText id="sgName" color="{getStyle('contentAreaTextColor')}" fontSize="11" width="100%" maxDisplayedLines="3" styleName="basicFontStyle"/>
				</s:Group>
			</s:VGroup>
		</s:Group>
		 
		<!--The old way it looked, minus the rectangle background.-->
			<!--<s:HGroup id="topLevelAreas" width="100%" height="100%" paddingLeft="5" paddingRight="5" paddingTop="5" paddingBottom="5">
					<s:VGroup id="leftSide" width="50%" height="100%">
						<util:SmoothImage id="initiatorImage" width="100%" height="70%" />
						<s:HGroup id="juiceNtime" width="100%" height="30%" >
							<s:Button id="juiceButton" width="50%" height="100%" />
							<s:RichText id="timeLeft" fontSize="24" color="{getStyle('textColor')}" width="50%" height="100%" />
						</s:HGroup>
					</s:VGroup>
					<s:VGroup id="rightSide" width="50%" height="100%" >
						<s:HGroup id="otherImages" width="100%" height="30%" >
							<s:Group id="intentSpot" width="50%" height="100%">
								<util:SmoothImage id="intentImage" width="100%" height="100%" />
								<s:Group id="theX" width="100%" height="100%" visible="false">
									<s:Line id="line1" xFrom="0" xTo="30" yFrom="30" yTo="0">
										<s:stroke>
											<s:SolidColorStroke color="black" alpha="1.0" weight="2" />
										</s:stroke>
									</s:Line>
									<s:Line id="line2" xFrom="0" xTo="30" yFrom="0" yTo="30">
										<s:stroke>
											<s:SolidColorStroke color="black" alpha="1.0" weight="2"/>
										</s:stroke>
									</s:Line>
								</s:Group>
							</s:Group>
							<util:SmoothImage id="responderImage" width="50%" height="100%" />
						</s:HGroup>
						<s:RichText id="autoActionName" fontSize="12" color="{getStyle('textColor')}" width="100%" height="70%" />
					</s:VGroup>
			</s:HGroup>-->
		
	<fx:Script>
		<![CDATA[
		import CiF.CiFSingleton;
		import flash.events.Event;
		import flash.events.TimerEvent;
		import flash.utils.getTimer;
		import flash.utils.Timer;
		import mx.containers.Box;
		import mx.controls.List;
		import PromWeek.assets.ResourceLibrary;
		import PromWeek.assets.SoundLibrary;
		import flash.media.Sound;
		import flash.media.SoundChannel;
		import CiF.*;
		import PromWeek.AutonomousActionNotifier;
		import PromWeek.assets.SoundLibrary;
		
		public var resourceLib:PromWeek.assets.ResourceLibrary = PromWeek.assets.ResourceLibrary.getInstance();
		public var soundLibrary:SoundLibrary = SoundLibrary.getInstance();
		public var gameEngine:PromWeek.GameEngine = PromWeek.GameEngine.getInstance();
		public var cif:CiFSingleton = CiFSingleton.getInstance();
		
		public var beginFading:Boolean;
		public var fadingOut:Boolean;
		public var mouseIsOver:Boolean;
		public var timeLength:Number;
		public var startTime:Number;
		public var deltaAlpha:Number = 0;
		public var alphaSpeed:Number = 1.0;
		public var intentType:Number;
		
		public var timeToDeleteMe:Boolean = false;
		
		public var predicateChangeIndex:int;
		
		public function onCreationComplete():void {
		}
		public function initializeGoalUpdates():void {
		}
		
		protected override function commitProperties():void {
			super.commitProperties();
			this.styleName = gameEngine.activeStyleName;
		}
		
		/**
		 * The function that shows the update goals. Will eventually pass in the goal that needs to be updated. Right now just does defaults.
		 * @param	
		 */
		public function autoActionUpdate(autoAction:AutonomousActionNotifier):void {
			if(!autoAction) return
			this.alpha = .05;
			this.visible = true;
			
			initiatorImage.source = resourceLib.charHeads[autoAction.initiator.toLowerCase()];
			sgName.text = autoAction.toolTipString;
			characterNameRichText.text = autoAction.initiator;
			//timeLeft.text = autoAction.turnsRemaining.toString();
			
			//Old Intent stuff. I fear taking it out if I just have to put it back in.
			/*intentType = cif.socialGamesLib.getByName(autoAction.gameName).intents[0].predicates[0].getIntentType();
			if (intentType == Predicate.INTENT_DATING) {
				intentImage.source = resourceLib.relationshipIcons["dating"];
				theX.visible = false;
			}
			else if (intentType == Predicate.INTENT_END_DATING) {
				intentImage.source = resourceLib.relationshipIcons["dating"];
				theX.visible = true;
			}
			else if (intentType == Predicate.INTENT_ENEMIES) {
				intentImage.source = resourceLib.relationshipIcons["enemies"];
				theX.visible = false;
			}
			else if (intentType == Predicate.INTENT_END_ENEMIES) {
				intentImage.source = resourceLib.relationshipIcons["enemies"];
				theX.visible = true;
			}
			else if (intentType == Predicate.INTENT_FRIENDS) {
				intentImage.source = resourceLib.relationshipIcons["friends"];
				theX.visible = false;
			}
			else if (intentType == Predicate.INTENT_END_FRIENDS) {
				intentImage.source = resourceLib.relationshipIcons["friends"];
				theX.visible = true;
			}
			else if (intentType == Predicate.INTENT_BUDDY_UP) {
				intentImage.source = resourceLib.networkArrowIcons["buddyUp"];
				theX.visible = false;
			}
			else if (intentType == Predicate.INTENT_BUDDY_DOWN) {
				intentImage.source = resourceLib.networkArrowIcons["buddyDown"];
				theX.visible = false;
			}
			else if (intentType == Predicate.INTENT_COOL_UP) {
				intentImage.source = resourceLib.networkArrowIcons["coolUp"];
				theX.visible = false;
			}
			else if (intentType == Predicate.INTENT_COOL_DOWN) {
				intentImage.source = resourceLib.networkArrowIcons["coolDown"];
				theX.visible = false;
			}
			else if (intentType == Predicate.INTENT_ROMANCE_UP) {
				intentImage.source = resourceLib.networkArrowIcons["romanceUp"];
				theX.visible = false;
			}
			else if (intentType == Predicate.INTENT_ROMANCE_DOWN) {
				intentImage.source = resourceLib.networkArrowIcons["romanceDown"];
				theX.visible = false;
			}*/
			//Other Images and Text
			//responderImage.source = resourceLib.charHeads[autoAction.responder.toLowerCase()];
			//autoActionName.text = autoAction.gameName;
			
			
			//var goalUpdatedSound:Sound = SoundLibrary.getInstance().maleUtterances[Utility.randRange(0,SoundLibrary.getInstance().maleUtterances.length-1)]() as Sound;
			//goalUpdatedSound.play();
			timeLength = 5000;
			fadeIn();
			beginFading = true;
			startTime =  getTimer();
			this.addEventListener("mouseOver", stopFade);
			this.addEventListener("mouseOut", startFade);
			}
			
		/**
		 * This is the special version for the new area. Pretty much only difference is that it doesn't fade out or move in, just fades in.
		 * @param	
		 */
		public function autoActionNotification(autoAction:AutonomousActionNotifier):void {
			if(!autoAction) return
			this.alpha = .05;
			this.visible = true;
			
			initiatorImage.source = resourceLib.charHeads[autoAction.initiator.toLowerCase()];
			sgName.text = autoAction.toolTipString;
			characterNameRichText.text = autoAction.initiator;
			timeLength = 5000;
			notificationFadeIn();
			beginFading = true;
			startTime =  getTimer();
			}
		
		
		/**
		 * This function and increase alpha is just used for fade in. Probably the more effecient way to do it, but I couldn't find out how to do
		 * it for fade out.
		 */
		public function fadeIn():void{
			var timer:Timer = new Timer(25, 20);
			timer.addEventListener(TimerEvent.TIMER, increaseAlpha);
			timer.start();
		}
		public function increaseAlpha(e:Event):void {
			this.alpha += 0.05;
			autoPopUpWindow.x -= this.width / 20;
		}
		
		/**
		 * This function and increase alpha is just used for fade in. Used for the new notification window.
		 */
		public function notificationFadeIn():void{
			var timer:Timer = new Timer(25, 20);
			timer.addEventListener(TimerEvent.TIMER, justIncreaseAlpha);
			timer.start();
		}
		public function justIncreaseAlpha(e:Event):void {
			this.alpha += 0.05;
		}
		
		/**
		 * Sets a boolean that will stop the fadeout from occuring, the logic of which is inside in update.
		 * Will stop fading and set the alpha to 1.
		 * @param	event
		 */
		public function stopFade(e:Event):void {
			this.mouseIsOver = true;
		}
		
		/**
		 * This will cancel the mouseOver logic so it can begin fading but it will fade
		 * out quicker every time it mouses out.
		 * @param	event
		 */
		public function startFade(e:Event):void {
			this.mouseIsOver = false;
			this.beginFading = true;
			this.startTime = getTimer();
			this.timeLength -= 1000;
		}
		
		/**
		 * This update logic for the autonomous actions thing. It currently makes it fade away if it is not being moused over.
		 * @param	elapsedTime
		 */
		public function update(elapsedTime:Number):void {
			//This takes the current time minus the time it started living and checked if it has been long enough to start fading out.
			if ((((getTimer() - this.startTime) > timeLength) && beginFading)){
				this.fadingOut = true;
				beginFading = false;
				this.deltaAlpha = 1;
			}
			
			//The logic to keep it visible and not fading out when the mouse is over it.
			if (mouseIsOver) {
				this.alpha = 1.0;
				this.fadingOut = false;
			}
			
			//Making it fade out when it is suppose to.
			if (fadingOut){
				this.deltaAlpha -= (elapsedTime / 1000.0) * alphaSpeed;
				this.alpha = deltaAlpha;
				//Debug.debug(this,"fading out: "+this.alpha);
			}
			
				
			//go away once you've faded enough
			if (this.fadingOut && this.alpha < .05){ 
				this.fadingOut = false;
				this.visible = false;
				this.removeEventListener("mouseOver", stopFade);
				this.removeEventListener("mouseOut", startFade);
				this.timeToDeleteMe = true;
			}
		}
		
		/**
		 * Sets the style according to what boolean is true in game engine. This is called in gameEngine with all other components that change
		 * their style at the same time.
		 */
		public function setStyleName():void {
			this.setStyle("styleName", PromWeek.GameEngine.getInstance().activeStyleName);
			/*if(gameEngine.classicPromColors) {
				this.setStyle("styleName", "classicPromWeek");
			}
			else if(gameEngine.greenPromColors) {
				this.setStyle("styleName", "greenColor");
			}
			else if(gameEngine.redPromColors) {
				this.setStyle("styleName", "redColor");
			}*/
			this.invalidateProperties();
		}
		
		]]>
			
	</fx:Script>
	

</s:Group>