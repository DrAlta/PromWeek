<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 creationComplete="onCreationComplete()"
		 mouseOver="networkLineMouseOverHandler(event)"
		 mouseEnabledWhereTransparent="false"
		 styleName="classicPromWeek">

	<fx:Metadata>
	</fx:Metadata>
		
	<fx:Declarations>
		

	</fx:Declarations>
	
	<s:Path id="toPath">
		<s:fill>
			<s:LinearGradient id="toPathGradient" >
				<s:entries>
					<s:GradientEntry color="{fillColorTo.color}" ratio="0.0" alpha="1.0"/>
					
					<s:GradientEntry color="{fillColorTo.color}" ratio="{toWeightRatio}" alpha="1.0"/> <!--alpha="{toAlpha}"/>-->
					
					<s:GradientEntry color="#ffffff" ratio="1.0" alpha="1.0"/> <!--alpha="{toAlpha}"/>-->
				</s:entries>
			</s:LinearGradient>
		</s:fill>
		
<!--		<s:stroke>
			<s:LinearGradientStroke id="toStroke" weight="3.0" rotation="{toAngle}">
				<s:entries>
					<s:GradientEntry color="black" alpha="1.0" />
					<s:GradientEntry color="black" alpha="{toAlpha}" />
				</s:entries>
			</s:LinearGradientStroke>
		</s:stroke>-->
		
		<s:stroke>
			<s:SolidColorStroke weight="3" color="{strokeColorTo.color}" />
		</s:stroke>

	</s:Path>
	
	<s:Path id="fromPath">
		<s:fill>
			<s:LinearGradient id="fromPathGradient" rotation="{fromAngle}">
				<s:entries>
					<s:GradientEntry color="{fillColorFrom.color}" ratio="0.0" alpha="1.0"/>
					<s:GradientEntry color="{fillColorFrom.color}" ratio="{fromWeightRatio}" alpha="1.0"/> <!--alpha="{fromAlpha}"/>-->
					<s:GradientEntry color="#ffffff" ratio="1.0" alpha="1.0"/> <!--alpha="{fromAlpha}"/>-->
				</s:entries>
			</s:LinearGradient>
		</s:fill>
		
<!--		<s:stroke>
			<s:LinearGradientStroke id="fromStroke" weight="3.0" rotation="{fromAngle}">
				<s:entries>
					<s:GradientEntry color="black" alpha="1.0" />
					<s:GradientEntry color="black" alpha="{toAlpha}" />
				</s:entries>
			</s:LinearGradientStroke>
		</s:stroke>-->
		

		<s:stroke>
			<s:SolidColorStroke weight="3" color="{strokeColorFrom.color}" />
		</s:stroke>

	</s:Path>
	
	<fx:Script>
		<![CDATA[
		import CiF.CiFSingleton;
		import mx.graphics.SolidColor;
		import mx.graphics.SolidColorStroke;
		import CiF.SocialNetwork;
		import spark.primitives.Line;
		
		private var gameEngine:GameEngine = GameEngine.getInstance();
		private var cif:CiFSingleton = CiFSingleton.getInstance();
		
		public var minLineHeight:Number = 5;
		public var maxLineHeight:Number = 50;
		
		private var minNetworkValue:Number = SocialNetwork.minRange;
		private var maxNetworkValue:Number = SocialNetwork.maxRange;
		
		public var fromChar:String;
		public var toChar:String;
		
		private var type:String;
		
		public var minColorShowingRatio:Number = 0;
		
		[Bindable]
		private var fillColorFrom:SolidColor = new SolidColor();
		[Bindable]
		private var strokeColorFrom:SolidColorStroke = new SolidColorStroke();
		[Bindable]
		private var fillColorTo:SolidColor = new SolidColor();		
		[Bindable]
		private var fillColorHalfTo:SolidColor = new SolidColor();
		[Bindable]
		private var fillColorHalfFrom:SolidColor = new SolidColor();
		[Bindable]
		private var strokeColorTo:SolidColorStroke = new SolidColorStroke();
		[Bindable]
		private var fromWeightRatio:Number;
		[Bindable]
		private var fromAlpha:Number;
		[Bindable]
		private var fromAngle:Number;
		[Bindable]
		private var toWeightRatio:Number;
		[Bindable]
		private var toAlpha:Number;
		[Bindable]
		private var toAngle:Number;
		
		
		private var valueTo:int;
		private var valueFrom:int;
		
		
		public var dir1a:Line;
		public var dir1b:Line;
		public var dir2a:Line;
		public var dir2b:Line;
		public var dirSlope:Number;
		
		public var arrowStrokeColor:SolidColorStroke;
		
		public function onCreationComplete():void
		{
			this.arrowStrokeColor = new SolidColorStroke(0x000000, 1.0);
			this.arrowStrokeColor.weight = 4;
			
			this.dir1a = new Line();
			this.dir1a.stroke = this.arrowStrokeColor;
			this.addElement(this.dir1a);
			this.dir1b = new Line();
			this.dir1b.stroke = this.arrowStrokeColor;
			this.addElement(this.dir1b);

			this.dir2a = new Line();
			this.dir2a.stroke = this.arrowStrokeColor;
			this.addElement(this.dir2a);
			this.dir2b = new Line();
			this.dir2b.stroke = this.arrowStrokeColor;
			this.addElement(this.dir2b);
		}
		
		public function update():void
		{
			type = gameEngine.currentNetworkSelection;
			//set the colors based on the type
			switch (type) {
				case "buddy":
					valueFrom = cif.buddyNetwork.getWeight(cif.cast.getCharByName(fromChar).networkID, cif.cast.getCharByName(toChar).networkID);
					valueTo = cif.buddyNetwork.getWeight(cif.cast.getCharByName(toChar).networkID, cif.cast.getCharByName(fromChar).networkID);
					fillColorFrom.color = getStyle('buddyColor');
					fillColorTo.color = getStyle('buddyColor');
					break;
				case "romance":
					valueFrom = cif.romanceNetwork.getWeight(cif.cast.getCharByName(fromChar).networkID, cif.cast.getCharByName(toChar).networkID);
					valueTo = cif.romanceNetwork.getWeight(cif.cast.getCharByName(toChar).networkID, cif.cast.getCharByName(fromChar).networkID);
					fillColorFrom.color = getStyle('romanceColor');
					fillColorTo.color = getStyle('romanceColor');
					break;
				case "cool":
					valueFrom = cif.coolNetwork.getWeight(cif.cast.getCharByName(fromChar).networkID, cif.cast.getCharByName(toChar).networkID);
					valueTo = cif.coolNetwork.getWeight(cif.cast.getCharByName(toChar).networkID, cif.cast.getCharByName(fromChar).networkID);
					fillColorFrom.color = getStyle('coolColor');
					fillColorTo.color = getStyle('coolColor');
					break;
			}
			
			setFromPathData();
			setToPathData();
		}
		
		public function setFromPathData():void
		{
			var dataString:String;
			
			var x1:Number, y1:Number, x2:Number, y2:Number;
			x1 = gameEngine.worldGroup.avatars[fromChar].locX;
			y1 = gameEngine.worldGroup.avatars[fromChar].locY;
			
			x2 = gameEngine.worldGroup.avatars[toChar].locX;
			y2 = gameEngine.worldGroup.avatars[toChar].locY;
			
			var networkRange:Number = Math.abs(maxNetworkValue - minNetworkValue);
			var lineHeightRange:Number = Math.abs(maxLineHeight - minLineHeight);
			
			var heightRatio:Number = (valueFrom - minNetworkValue) / networkRange;
			
			var lineHeight:Number = minLineHeight + lineHeightRange * heightRatio;
			
			var vecX:Number, vecY:Number;
			vecX = x2 - x1;
			vecY = y2 - y1;
			var vecLength:Number = Math.sqrt(vecX * vecX + vecY * vecY);
			
			var normalX:Number = vecX / vecLength;
			var normalY:Number = vecY / vecLength;
			
			var deltaX:Number = -normalY * lineHeight;
			var deltaY:Number = normalX * lineHeight;
			

			fromAngle = Math.abs(Math.asin(vecY / vecLength) * 180 / Math.PI);
			if (vecX > 0)
			{
				//char 1 on right
				if (vecY > 0)
				{
					//char1 on bottom right
					//trace("bottom right");
				}
				else
				{
					//char1 on top right
					fromAngle = 360 - fromAngle;
					//trace("top right");
				}
			}
			else
			{
				if (vecY > 0)
				{
					//char1 on bottom left
					fromAngle = 180 - fromAngle;
					//trace("bottom left");
				}
				else
				{
					//char1 on top left
					fromAngle += 180;
					//trace("top left");
				}
			}
			fromPathGradient.rotation = fromAngle;
			

			fromWeightRatio = minColorShowingRatio + heightRatio * (1.0 - minColorShowingRatio);
			fromAlpha = heightRatio;
			
			dataString = "M " + x1 + " " + y1;
			dataString += " L " + x2 + " " + y2;
			dataString += " L " + (x2 + deltaX) + " " + (y2 + deltaY);
			dataString += " L " + (x1 + deltaX) + " " + (y1 + deltaY);
			dataString += " Z";
			
			fromPath.data = dataString;
			

			
			//so now I want to draw the arrows...
			
		}
			
		public function setToPathData():void
		{
			var dataString:String;
			
			var x1:Number, y1:Number, x2:Number, y2:Number;
			x1 = gameEngine.worldGroup.avatars[toChar].locX;
			y1 = gameEngine.worldGroup.avatars[toChar].locY;
			
			x2 = gameEngine.worldGroup.avatars[fromChar].locX;
			y2 = gameEngine.worldGroup.avatars[fromChar].locY;
			
			var networkRange:Number = Math.abs(maxNetworkValue - minNetworkValue);
			var lineHeightRange:Number = Math.abs(maxLineHeight - minLineHeight);
			
			var heightRatio:Number = (valueTo - minNetworkValue) / networkRange;
			
			var lineHeight:Number = minLineHeight + lineHeightRange * heightRatio;
			
			var vecX:Number, vecY:Number;
			vecX = x2 - x1;
			vecY = y2 - y1;
			var vecLength:Number = Math.sqrt(vecX * vecX + vecY * vecY);
			
			var normalX:Number = vecX / vecLength;
			var normalY:Number = vecY / vecLength;
			
			var deltaX:Number = -normalY * lineHeight;
			var deltaY:Number = normalX * lineHeight;
			

			toAngle = Math.abs(Math.asin(vecY / vecLength) * 180 / Math.PI);
			if (vecX > 0)
			{
				//char 1 on right
				if (vecY > 0)
				{
					//char1 on bottom right
					//trace("bottom right");
				}
				else
				{
					//char1 on top right
					toAngle = 360 - toAngle;
					//trace("top right");
				}
			}
			else
			{
				if (vecY > 0)
				{
					//char1 on bottom left
					toAngle = 180 - toAngle;
					//trace("bottom left");
				}
				else
				{
					//char1 on top left
					toAngle += 180;
					//trace("top left");
				}
			}
			toPathGradient.rotation = toAngle;


			//trace(toAngle);
			
			
			toWeightRatio = minColorShowingRatio + heightRatio * (1.0 - minColorShowingRatio);
			toAlpha = heightRatio;
			
			dataString = "M " + x1 + " " + y1;
			dataString += " L " + x2 + " " + y2;
			dataString += " L " + (x2 + deltaX) + " " + (y2 + deltaY);
			dataString += " L " + (x1 + deltaX) + " " + (y1 + deltaY);
			dataString += " Z";			
			
			
			toPath.data = dataString;
			
			//trace(deltaX + " " + deltaY);
		}
			
		private function networkLineMouseOverHandler(e:MouseEvent):void 
		{
			gameEngine.worldGroup.networkGroup.setElementIndex(this, gameEngine.worldGroup.networkGroup.numChildren - 1);
		}
		
			
		]]>
	</fx:Script>
		
	
</s:Group>