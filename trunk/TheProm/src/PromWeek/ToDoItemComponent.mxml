<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:prom="PromWeek.*" xmlns:util="com.util.*"
		 creationComplete="onCreationComplete()"
		 initialize="initializeToDoItem()"
		 width="100%"
		 height="100%"
		 styleName="classicPromWeek">
		 
		 <fx:Metadata>
		 </fx:Metadata>
		 
		 <fx:Declarations>
			 <fx:Number id="progressBarPercentWidth">0</fx:Number>
			 <fx:Number id="progressBarWidth">0</fx:Number>
			 <fx:String id="goalProgressCountText"></fx:String>
		 </fx:Declarations>
		 
		 
		 
		
		<s:HGroup id="bgColorGroup" width="100%" height="100%">
			<s:Rect id="backgroundRect" width="100%" height="100%" >
				<s:stroke>
					<s:SolidColorStroke weight="2" color="{getStyle('backgroundStroke')}" caps="none" />
				</s:stroke>
				<s:fill>
					<s:SolidColor color="{getStyle('contentAreaColor')}" alpha="0.7" />
				</s:fill>
			</s:Rect>
		</s:HGroup>
		
		<s:HGroup id="todoItemGroup" width="410" height="100%" paddingLeft="15" paddingRight="15" gap="5">
			<s:RichText width="335" height="100%" id="todoItemNameLabel" fontSize="20" textAlign="left" fontWeight="bold" color="{getStyle('textColor')}" verticalAlign="middle" styleName="storyGoalTextStyle" />
			<s:HGroup width="60" height="100%" horizontalAlign="right" verticalAlign="middle">
				<s:RichText id="goalProgressCount" text="{this.goalProgressCountText}" width="100%" height="100%" fontSize="20" verticalAlign="middle" textAlign="right" color="{getStyle('textColor')}" styleName="storyGoalTextStyle"/>
			</s:HGroup>
			<!--<s:HGroup width="80" height="100%" id="progressGroup" paddingTop="8" visible="false">
				<s:Group width="100%" height="100%">
					<s:Rect id="progressBGRect" width="80" height="{progressGroup.height/3}">
						<s:fill>
							<s:SolidColor color="{getStyle('toDoBarBGColor')}" alpha="1.0"/>
						</s:fill>
					</s:Rect>
					<s:Rect id="progressFGRect" width="{this.progressBarWidth}" height="{progressGroup.height/3}">
						<s:fill>
							<s:SolidColor color="{getStyle('toDoBarFGColor')}" alpha="1"/>
						</s:fill>
					</s:Rect>
					<s:Rect id="progressFrameRect" width="80" height="{progressGroup.height/3}">
						<s:stroke>
							<s:SolidColorStroke weight="2" color="{getStyle('backgroundStroke')}" />
						</s:stroke>
					</s:Rect>
				</s:Group>
			</s:HGroup>-->
			<s:HGroup id="progressImageGroup" width="35" height="100%" verticalAlign="middle">
				<util:SmoothImage id="progressImage" width="30" height="30" visible="false" />
			</s:HGroup>
			<!--<s:Group id="taskListGroup" y="{-taskListGroup.height/2}" width="10%" height="100%">
				<s:Rect id="taskListButton" width="100%" height="100%" >
					<s:stroke>
						<s:SolidColorStroke weight="2" color="#000000" caps="none" />
					</s:stroke>
					<s:fill>
						<s:SolidColor color="#0E386C" alpha="0.7" />
					</s:fill>
				</s:Rect>
			</s:Group>-->
		</s:HGroup>
		
	<fx:Script>
		<![CDATA[
		
		import CiF.CiFSingleton;
		import flash.display.Bitmap;
		import PromWeek.assets.ResourceLibrary;
		
		
		public var toDoItem:ToDoItem;
		public var conditionText:String;
		private var gameEngine:PromWeek.GameEngine = PromWeek.GameEngine.getInstance();
		private var resourceLibrary:ResourceLibrary = ResourceLibrary.getInstance();
		
		
		public function onCreationComplete():void {
			gameEngine = PromWeek.GameEngine.getInstance();
			resourceLibrary = ResourceLibrary.getInstance();
		}
		
		public function initializeToDoItem():void 
		{	
		}
		
		
		public function setProgressWidthPercent(w:Number):void {
			this.progressBarPercentWidth = w;
			
			//this.progressBarWidth = progressBGRect.width * progressBarPercentWidth;
			if (this.progressBarWidth > 80)
				this.progressBarWidth = 80;
			
			//this.goalProgressCountText = Math.floor(progressBarPercentWidth/this.toDoItem.taskNaturalLanguageWords.length) + " / " + this.toDoItem.taskNaturalLanguageWords.length;
			
			this.goalProgressCount.invalidateDisplayList();
			
			this.invalidateDisplayList();
			this.invalidateProperties();
			this.invalidateSize();
			this.commitProperties();
		}
		
		override protected function commitProperties():void{
			super.commitProperties();
			//progressGroup.width = 80;
			//this.progressBarWidth = progressBGRect.width * progressBarPercentWidth;
			if (this.progressBarWidth > 80)
				this.progressBarWidth = 80;
			
		}
		
		public function clone():PromWeek.ToDoItemComponent {
			var cloned:PromWeek.ToDoItemComponent = new PromWeek.ToDoItemComponent();
			cloned.conditionText = this.conditionText;
			cloned.setProgressWidthPercent(this.progressBarPercentWidth);
			cloned.todoItemNameLabel.text = this.todoItemNameLabel.text;
			cloned.toDoItem = this.toDoItem;
			cloned.width = this.width;
			cloned.height = this.height;
			cloned.y = 2;
			cloned.commitProperties();
			return cloned;
		}
		
		
		public function updateProgressImage(completed:Boolean,hasBeenCompletedBefore:Boolean):void
		{
			if (completed)
			{
				this.progressImage.visible = true;
				this.progressImage.alpha = 1;
				if (hasBeenCompletedBefore)
				{
					//check mark
					this.progressImage.source = resourceLibrary.uiIcons["check"];
					progressImageGroup.toolTip = "Goal completed (goal previously met)"
				}
				else
				{
					//star
					this.progressImage.source = resourceLibrary.uiIcons["star"];
					progressImageGroup.toolTip = "Goal completed for the first time!"
				}
			}
			else
			{
				if (hasBeenCompletedBefore)
				{
					//faded blued check
					this.progressImage.visible = true;
					this.progressImage.alpha = 0.5;
					this.progressImage.source = resourceLibrary.uiIcons["blueCheck"];
					progressImageGroup.toolTip = "Goal previously met"
				}
				else
				{
					this.progressImage.visible = false;
				}
			}
			var bMap:Bitmap = this.progressImage.content as Bitmap;
			if (bMap != null)
			{
				bMap.smoothing = true;
			}
		}
		
		
		
		/**
		 * Sets the style according to what boolean is true in game engine. This is called in gameEngine with all other components that change
		 * their style at the same time.
		 */
		public function setStyleName():void {
			this.setStyle("styleName", PromWeek.GameEngine.getInstance().activeStyleName);
			/*gameEngine = PromWeek.GameEngine.getInstance();
			if(gameEngine.classicPromColors) {
				this.setStyle("styleName", "classicPromWeek");
			}
			else if(gameEngine.greenPromColors) {
				this.setStyle("styleName", "greenColor");
			}
			else if(gameEngine.redPromColors) {
				this.setStyle("styleName", "redColor");
			}*/
			
			this.invalidateProperties();
		}
		
		]]>
			
	</fx:Script>
	

</s:Group>