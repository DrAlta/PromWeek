<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:prom="PromWeek.*" xmlns:util="com.util.*"
		 creationComplete="onCreationComplete()"
		 click="goalUpdatedClickedOn(event)"
		 initialize="initializeGoalUpdates()"
		 styleName="classicPromWeek"
		 width="210"
		 height="85">
		 <!--width="{getStyle('updateWidth')}"
		 height="{getStyle('updateHeight')}">-->
		 
		 <fx:Metadata>
		 </fx:Metadata>
		 
		 <fx:Declarations>
			<fx:Number id="requiresThirdProgressSize">20</fx:Number>
			<fx:Number id="doesntRequireThirdProgressSize">35</fx:Number>
			<fx:Number id="iconDimension">25</fx:Number>
		 </fx:Declarations>
		 
		 
		 
		 <s:Group id="GoalUpdateWindow" width="100%" height="100%">
			<s:Rect width="100%" height="100%">
				<s:stroke>
					<s:SolidColorStroke weight="{getStyle('windowStrokeWeight')}" color="{getStyle('backgroundStroke')}" />
				</s:stroke>
				<s:fill>
					<s:SolidColor color="{getStyle('updateBGColor')}" alpha="1.0"/>
				</s:fill>
			</s:Rect>
			<s:VGroup id="highestGroup" width="100%" height="100%" paddingTop="5" paddingLeft="5" paddingRight="5" paddingBottom="5">
				<s:HGroup id="onTopGroup" width="100%" height="25" gap="27">
					<util:SmoothImage id="goodOrBadImage"/>
					<s:RichText id="storyGoalName" color="{getStyle('contentAreaTextColor')}" fontSize="11" width="75" height="100%" verticalAlign="middle" textAlign="center" fontWeight="bold" styleName="basicFontStyle"/>
					<s:Group width="40" height="100%">
						<s:Rect width="100%" height="100%" maxHeight="100">
							<s:fill>
								<s:SolidColor color="{getStyle('buttonColor')}" alpha="1.0"/>
							</s:fill>
						</s:Rect>	
						<s:RichText text="Goal" fontSize="10" color="white" width="100%" height="100%" verticalAlign="middle" textAlign="center" styleName="basicFontStyle"/>
					</s:Group>
				</s:HGroup>
				<s:HGroup id="feedLine" width="100%" height="45"> <!--height="{highestGroup.height - onTopGroup.height}">-->
					<s:HGroup id="charHeadGroup" width="40" height="40" gap="0" />
					<s:RichText id="GoalTaskName" color="{getStyle('contentAreaTextColor')}" fontSize="11" width="90%" maxDisplayedLines="3" styleName="basicFontStyle"/>
				</s:HGroup>
			</s:VGroup>
		</s:Group>
		 
		 
		
	<fx:Script>
		<![CDATA[
		import CiF.Character;
		import flash.events.Event;
		import flash.events.MouseEvent;
		import flash.events.TimerEvent;
		import flash.utils.getTimer;
		import flash.utils.Timer;
		import mx.containers.Box;
		import mx.controls.Image;  import com.util.SmoothImage;
		import mx.controls.List;
		import PromWeek.assets.ResourceLibrary;
		import flash.media.Sound;
		import flash.media.SoundChannel;
		
		public var resourceLib:PromWeek.assets.ResourceLibrary = PromWeek.assets.ResourceLibrary.getInstance();
		//public var soundLibrary:SoundLibrary = SoundLibrary.getInstance();
		public var gameEngine:PromWeek.GameEngine = PromWeek.GameEngine.getInstance();
		
		public var beginFading:Boolean;
		public var fadingOut:Boolean;
		public var mouseIsOver:Boolean;
		public var timeLength:Number;
		public var startTime:Number;
		public var deltaAlpha:Number = 0;
		public var alphaSpeed:Number = 1.0;
		
		public var primChar:Character;
		public var secondChar:Character;
		
		public var timeToDeleteMe:Boolean = false;
		
		public var predicateChangeIndex:int;
		
		//This is used for a hack to connec tthis to the todoitemaccordian
		public var charPictured:String;
		
		public function onCreationComplete():void {
			
		}
		public function initializeGoalUpdates():void {
			//soundLibrary = SoundLibrary.getInstance();
		}
		
		protected override function commitProperties():void {
			super.commitProperties();
			this.styleName = gameEngine.activeStyleName;
		}
		
		//Closes the box when the x is clicked on.
		public function xClickedOn():void {
			this.visible = false;
		}
		
		public function goalUpdatedClickedOn(event:MouseEvent=null):void
		{
			var indexToOpen:int = -1;
			for each (var tdic:PromWeek.ToDoItemComponent in PromWeek.GameEngine.getInstance().hudGroup.storyGoalWindow.toDoItemAccordion.toDoItemComponents)
			{
				if (tdic.todoItemNameLabel.text == this.storyGoalName.text)
				{
					indexToOpen = PromWeek.GameEngine.getInstance().hudGroup.storyGoalWindow.toDoItemAccordion.toDoItemComponents.indexOf(tdic);
				}
			}
			
			
			PromWeek.GameEngine.getInstance().hudGroup.storyGoalWindow.toDoItemAccordion.toggler(null,indexToOpen,true)
			PromWeek.GameEngine.getInstance().hudGroup.megaUI.goalButtonClicked(null, true);
			
			PromWeek.GameEngine.getInstance().hudGroup.storyGoalWindow.characterFilterGroup.characterLastClicked = charPictured;
			PromWeek.GameEngine.getInstance().hudGroup.storyGoalWindow.filterClickedOn(null, false);
			PromWeek.GameEngine.getInstance().hudGroup.storyGoalWindow.mouseOverCharacters();
		}
		
		
		/**
		 * The function that shows the update goals. Will eventually pass in the goal that needs to be updated. Right now just does defaults.
		 * @param	
		 */
		public function showUpdatedGoal(title:String,toolTipString:String,good:Boolean,predChangeIndex:int,primChar1:Character=null, secondChar1:Character=null,iconName:String=""):void {
			this.alpha = .05;
			this.visible = true;
			
			primChar = primChar1;
			secondChar = secondChar1;
			
			this.charHeadGroup.removeAllElements();
			
			if (iconName != "")
			{
				goodOrBadImage.source = ResourceLibrary.getInstance().uiIcons[iconName];				
			}
			else
			{
				if (good)
				{
					goodOrBadImage.source = ResourceLibrary.getInstance().uiIcons["check"];
				}
				else
				{
					goodOrBadImage.source = ResourceLibrary.getInstance().uiIcons["cross"];
				}
			}
			
			goodOrBadImage.width = this.iconDimension;
			goodOrBadImage.height = this.iconDimension;
			
			
			this.predicateChangeIndex = predChangeIndex;
			this.GoalTaskName.text = toolTipString;
			
			storyGoalName.text = title;
			//var goalUpdatedSound:Sound = SoundLibrary.getInstance().maleUtterances[Utility.randRange(0,SoundLibrary.getInstance().maleUtterances.length-1)]() as Sound;
			//goalUpdatedSound.play();
			
			var resourceLibrary:ResourceLibrary = ResourceLibrary.getInstance();
			
			charPictured = "";
			
			var image:SmoothImage = new SmoothImage();
			
			var shouldGoIn:Boolean = true;
			
			if (primChar && secondChar)
			{
				if (primChar.characterName == secondChar.characterName)
				{
					//the weird case where we get two of the same character for some reason
					image.source = resourceLibrary.charHeads[primChar.characterName.toLowerCase()];
					this.charHeadGroup.toolTip = primChar.characterName;

					image.width = this.doesntRequireThirdProgressSize;
					image.height = this.doesntRequireThirdProgressSize;
					
					this.charHeadGroup.addElement(image);
					charPictured = primChar.characterName.toLowerCase();
					
					shouldGoIn = false;
				}
			}
			
			if (shouldGoIn)
			{
				//The normal case
				if (primChar != null)
				{
					image.source = resourceLibrary.charHeads[primChar.characterName.toLowerCase()];
					this.charHeadGroup.toolTip = primChar.characterName;
					if (secondChar != null)
					{
						image.width = this.requiresThirdProgressSize;
						image.height = this.requiresThirdProgressSize;
					}
					else
					{
						image.width = this.doesntRequireThirdProgressSize;
						image.height = this.doesntRequireThirdProgressSize;
					}
					this.charHeadGroup.addElement(image);
					charPictured = primChar.characterName.toLowerCase();
				}			
				if (secondChar != null)
				{
					image = new SmoothImage();
					image.source = resourceLibrary.charHeads[secondChar.characterName.toLowerCase()];
					if (primChar != null)
					{
						this.charHeadGroup.toolTip += " and " + secondChar.characterName;
					}
					else
					{
						this.charHeadGroup.toolTip += secondChar.characterName;
					}
					image.width = this.requiresThirdProgressSize;
					image.height = this.requiresThirdProgressSize;
					this.charHeadGroup.addElement(image);
				}
			}

			timeLength = 9000;
			fadeIn();
			beginFading = true;
			startTime =  getTimer();
			this.addEventListener("mouseOver", stopFade);
			this.addEventListener("mouseOut", startFade);
			//this.addEventListener("click", openToDo);
		}
		
		/**
		 * Same thing as above, just only fades in.
		 * @param	
		 */
		public function notificationGoal(title:String,toolTipString:String,good:Boolean,predChangeIndex:int,primChar1:Character=null, secondChar1:Character=null,iconName:String=""):void {
			this.alpha = .05;
			this.visible = true;
			
			primChar = primChar1;
			secondChar = secondChar1;
			
			this.charHeadGroup.removeAllElements();
			
			
			goodOrBadImage.width = this.iconDimension;
			goodOrBadImage.height = this.iconDimension;
			
			if (iconName != "")
			{
				//this means we are a num times uniquely true case
				goodOrBadImage.source = ResourceLibrary.getInstance().uiIcons[iconName];
			}
			else
			{
				if (good)
				{
					goodOrBadImage.source = ResourceLibrary.getInstance().uiIcons["check"];
				}
				else
				{
					goodOrBadImage.source = ResourceLibrary.getInstance().uiIcons["cross"];
				}
			}
			this.predicateChangeIndex = predChangeIndex;
			this.GoalTaskName.text = toolTipString;
			
			storyGoalName.text = title;
			
			var resourceLibrary:ResourceLibrary = ResourceLibrary.getInstance();
			
			charPictured = "";
			
			var image:SmoothImage = new SmoothImage();
			
			var shouldGoInConditionalBelow:Boolean = true;
			if (primChar && secondChar)
			{
				if (primChar.characterName == secondChar.characterName)
				{
					shouldGoInConditionalBelow = false;
					//the weird case where we get two of the same character for some reason
					image.source = resourceLibrary.charHeads[primChar.characterName.toLowerCase()];
					this.charHeadGroup.toolTip = primChar.characterName;

					image.width = this.doesntRequireThirdProgressSize;
					image.height = this.doesntRequireThirdProgressSize;
					
					this.charHeadGroup.addElement(image);
					charPictured = primChar.characterName.toLowerCase();
				}
			}

			if (shouldGoInConditionalBelow)
			{
				//the normal case
				if (primChar != null)
				{
					image.source = resourceLibrary.charHeads[primChar.characterName.toLowerCase()];
					this.charHeadGroup.toolTip = primChar.characterName;
					if (secondChar != null)
					{
						if (secondChar.characterName == primChar.characterName)
						{
							//this is a work around to fix a b ug when the two chars are the same because of a bug
							image.width = this.doesntRequireThirdProgressSize;
							image.height = this.doesntRequireThirdProgressSize;
						}
						else
						{
							image.width = this.requiresThirdProgressSize;
							image.height = this.requiresThirdProgressSize;
						}
					}
					else
					{
						image.width = this.doesntRequireThirdProgressSize;
						image.height = this.doesntRequireThirdProgressSize;
					}
					this.charHeadGroup.addElement(image);
					charPictured = primChar.characterName.toLowerCase();
				}			
				if (secondChar != null && primChar != null)
				{
					if (secondChar.characterName != primChar.characterName)
					{
						image = new SmoothImage();
						image.source = resourceLibrary.charHeads[secondChar.characterName.toLowerCase()];
						if (primChar != null)
						{
							this.charHeadGroup.toolTip += " and " + secondChar.characterName;
						}
						else
						{
							this.charHeadGroup.toolTip += secondChar.characterName;
						}
						image.width = this.requiresThirdProgressSize;
						image.height = this.requiresThirdProgressSize;
						this.charHeadGroup.addElement(image);
					}
				}
			}

			timeLength = 9000;
			notificationFadeIn();
			beginFading = true;
			startTime =  getTimer();
		}
		
		
		/**
		 * This function and increase alpha is just used for fade in. Probably the more effecient way to do it, but I couldn't find out how to do
		 * it for fade out.
		 */
		public function fadeIn():void{
			var timer:Timer = new Timer(25, 20);
			timer.addEventListener(TimerEvent.TIMER, increaseAlpha);
			timer.start();
		}
		public function increaseAlpha(e:Event):void {
			this.alpha += 0.05;
			GoalUpdateWindow.x -= this.width/20;
		}
		
		/**
		 * This function and increase alpha is just used for fade in. Used for the new notification window.
		 */
		public function notificationFadeIn():void{
			var timer:Timer = new Timer(25, 20);
			timer.addEventListener(TimerEvent.TIMER, justIncreaseAlpha);
			timer.start();
		}
		public function justIncreaseAlpha(e:Event):void {
			this.alpha += 0.05;
		}
		
		/**
		 * Sets a boolean that will stop the fadeout from occuring, the logic of which is inside in update.
		 * Will stop fading and set the alpha to 1.
		 * @param	event
		 */
		public function stopFade(e:Event):void {
			this.mouseIsOver = true;
		}
		
		/**
		 * Makes the to do list visible when you click on the updated goal.
		 * @param	event
		 */
		/*public function openToDo(e:Event):void 
		{
			//mark open to the change that happened
			gameEngine.hudGroup.toDoListComponent.closeAllButByName(this.GoalName.text,this.predicateChangeIndex);
			
			gameEngine.hudGroup.toDoListComponent.visible = true;
		}*/
		
		/**
		 * This will cancel the mouseOver logic so it can begin fading but it will fade
		 * out quicker every time it mouses out.
		 * @param	event
		 */
		public function startFade(e:Event):void {
			this.mouseIsOver = false;
			this.beginFading = true;
			this.startTime = getTimer();
			this.timeLength -= 1000;
		}
		
		/**
		 * This update logic for the achievement pop up screen. Makes it so it will fade out after so much time, with other if statements to
		 * handle other different logics.
		 * @param	elapsedTime
		 */
		public function update(elapsedTime:Number):void {
			//This takes the current time minus the time it started living and checked if it has been long enough to start fading out.
			if ((((getTimer() - this.startTime) > timeLength) && beginFading)){
				this.fadingOut = true;
				beginFading = false;
				this.deltaAlpha = 1;
			}
			
			//The logic to keep it visible and not fading out when the mouse is over it.
			if (mouseIsOver) {
				this.alpha = 1.0;
				this.fadingOut = false;
			}
			
			//Making it fade out when it is suppose to.
			if (fadingOut){
				this.deltaAlpha -= (elapsedTime / 1000.0) * alphaSpeed;
				this.alpha = deltaAlpha;
				//Debug.debug(this,"fading out: "+this.alpha);
			}
			
				
			//go away once you've faded enough
			if (this.fadingOut && this.alpha < .05){ 
				this.fadingOut = false;
				this.visible = false;
				this.removeEventListener("mouseOver", stopFade);
				this.removeEventListener("mouseOut", startFade);
				//this.removeEventListener("click", openToDo);
				this.timeToDeleteMe = true;
			}
		}
		
		/**
		 * Sets the style according to what boolean is true in game engine. This is called in gameEngine with all other components that change
		 * their style at the same time.
		 */
		public function setStyleName():void {
			this.setStyle("styleName", PromWeek.GameEngine.getInstance().activeStyleName);
			/*if(gameEngine.classicPromColors) {
				this.setStyle("styleName", "classicPromWeek");
			}
			else if(gameEngine.greenPromColors) {
				this.setStyle("styleName", "greenColor");
			}
			else if(gameEngine.redPromColors) {
				this.setStyle("styleName", "redColor");
			}*/
			this.invalidateProperties();
		}
		
		]]>
			
	</fx:Script>
	

</s:Group>