<?xml version="1.0" encoding="utf-8"?>
<!-- http://blog.flexexamples.com/2010/01/27/creating-a-fancy-spark-list-control-item-renderer-in-flex-4/ -->
<s:ItemRenderer name="GoalTaskItemRenderer"
        xmlns:fx="http://ns.adobe.com/mxml/2009"
        xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:mx="library://ns.adobe.com/flex/mx" 
		xmlns:cif="CiF.*" 
		xmlns:prom="PromWeek.*" xmlns:util="com.util.*"
		width="320" height="30"
		creationComplete="onCreationComplete()"
		styleName="classicPromWeek">

		
	<fx:Declarations>
		<cif:Predicate id="pred"/>
		<cif:Rule id="rule"/>
		<fx:Boolean id="isTheyAreTheSamePerson">false</fx:Boolean>
	</fx:Declarations>
		
		
    <s:states>
        <s:State name="normal" />
        <s:State name="hovered" />
        <s:State name="selected" />
    </s:states>

	
	<!--<s:Rect width="100%" height="100%" radiusX="15" includeIn="normal">
		<s:stroke>
			<s:SolidColorStroke weight="1" color="#000033" id="buttonBorder" />
		</s:stroke>
		<s:fill>
			<s:SolidColor color.normal="#999999" color.selected="#111111" color.hovered="#444444"/>
		</s:fill>
	</s:Rect>-->
	<s:HGroup paddingLeft="5" paddingRight="5" width="100%" height="100%">
		<!--<util:SmoothImage id="checkMarkImage" source="{data.icon}" verticalAlign="middle" visible="false" />  color="{getStyle('contentAreaTextColor')}"-->
		<util:SmoothImage id="checkMarkImage" verticalAlign="middle" visible="false" width="20" height="20" />
		<s:RichText id="taskNameRichText" color="0xFFFFFF"
				verticalAlign="middle"
				width="100%"
				height="100%"
				showTruncationTip="true" styleName="storyGoalTextStyle"/>
	</s:HGroup>
 
	<fx:Script>
	<![CDATA[
		import CiF.Character;
		import CiF.CiFSingleton;
		import CiF.Debug;
		import CiF.LineOfDialogue;
		import CiF.Predicate;
		import CiF.Trait;
		import flash.events.*;
		import flashx.textLayout.utils.CharacterUtil;
		import PromWeek.assets.ResourceLibrary;
		import spark.components.List;
		
		public var gameEngine:PromWeek.GameEngine;
		public var cif:CiFSingleton;
		public var resourceLibrary:ResourceLibrary;
		
		public function onCreationComplete():void
		{
			gameEngine = PromWeek.GameEngine.getInstance();
			resourceLibrary = ResourceLibrary.getInstance();
			cif = CiFSingleton.getInstance();
			
			this.checkMarkImage.source = resourceLibrary.uiIcons["check"];
			this.checkMarkImage.visible = false;
			
			//this.addEventListener("MOUSE_OVER_PROGRESS_CHARACTERS", updateProgressInfo);
			this.addEventListener(MouseEvent.CLICK,listItemClicked);
		}
		
		protected override function commitProperties():void {
			super.commitProperties();
			this.styleName = this.className;
		}
		
		override public function set data(value:Object):void 
		{
			if (value.rule != null)
			{
				this.rule = value.rule;
			}
						
			if (value.isTheyAreTheSamePerson != null)
			{
				if (value.isTheyAreTheSamePerson)
				{
					this.isTheyAreTheSamePerson = true;
				}
				else
				{
					this.isTheyAreTheSamePerson = false;				
				}
				
			}

			var responder:Character = (value.responder != null)?value.responder:null;
			var other:Character = (value.other != null)?value.other:null;
			
			if (value.pred != null)
			{
				this.pred = value.pred;
			}
				
				
			if (value.autoDrawBackground != null)
			{
				this.autoDrawBackground = value.autoDrawBackground;
			}
			
			if (value.shouldDisplayChecks != null)
			{
				if (value.shouldDisplayChecks == true)
				{
					if (!this.isTheyAreTheSamePerson)
					{
						this.updateCheckMarks(responder, other);
					}
					else
					{
						this.isTheyAreTheSamePersonCheckUpdate();
					}
				}
				else
				{
					this.checkMarkImage.visible = false;
				}
			}
			

			var textToUse:String = (value.textToUse)?value.textToUse:"";
			
			this.updateTaskNameText(textToUse);
			

			
			super.data = value;
		}
		
		
		
		public function clearCheckMark():void
		{
			this.checkMarkImage.visible = false;
			
		}
		
		
		
		
		private function isTheyAreTheSamePersonCheckUpdate():Boolean
		{
			this.cif = CiFSingleton.getInstance();
			this.gameEngine = GameEngine.getInstance();
			
			if (this.rule.evaluateRuleForInitiatorAndCast(cif.cast.getCharByName(gameEngine.currentStory.storyLeadCharacter), cif.cast.characters))
			{
				this.checkMarkImage.source = ResourceLibrary.getInstance().uiIcons["check"];
				this.checkMarkImage.visible = true;
				return true;
			}
			else
			{
				this.checkMarkImage.source = ResourceLibrary.getInstance().uiIcons["cross"];
				this.checkMarkImage.visible = true
				return false;
			}	
		}
		
		
		
		private function updateCheckMarks(responder:Character,other:Character=null):Boolean
		{	
			var sfdbOrderOK:Boolean = true;
			var predOKToRoll:Boolean = true;
			if (this.rule)
			{
				if (this.rule.hasSFDBOrder())
				{
					for each (var pred1:Predicate in this.rule.predicates)
					{
						//if we've gotten to our pred, stop!
						if (Predicate.equals(this.pred, pred1))
						{
							predOKToRoll = false;
						}
						
						if (predOKToRoll)
						{
							var predTrue:Boolean = pred1.evaluate(CiFSingleton.getInstance().cast.getCharByName(PromWeek.GameEngine.getInstance().currentStory.storyLeadCharacter), responder, other);
							if (!predTrue)
							{
								if (sfdbOrderOK)
								{
									sfdbOrderOK = false;
								}
							}
						}
					}
				}
			}
			
			//if (this.pred.numTimesUniquelyTrueFlag)
			//{
				//trace("dsadsadsa");
			//}
			
			//if (sfdbOrderOK && this.pred.evaluate(CiFSingleton.getInstance().cast.getCharByName(PromWeek.GameEngine.getInstance().currentStory.storyLeadCharacter),responder,other))
			if (sfdbOrderOK && this.pred.evaluatePredicateForInitiatorAndCast(CiFSingleton.getInstance().cast.getCharByName(PromWeek.GameEngine.getInstance().currentStory.storyLeadCharacter)))
			{
				//this.data.icon = resourceLibrary.uiIcons["check"];
				this.checkMarkImage.source = ResourceLibrary.getInstance().uiIcons["check"];
				this.checkMarkImage.visible = true;
				return true;
			}
			else
			{
				this.checkMarkImage.source = ResourceLibrary.getInstance().uiIcons["cross"];
				//this.checkMarkImage.source = null;
				this.checkMarkImage.visible = true;// resourceLibrary.uiIcons["cross"];
				return false;
			}	
		}
		
		private function updateTaskNameText(textToUse:String):void
		{
			this.taskNameRichText.text = LineOfDialogue.preprocessLine(textToUse);
			
			if (this.taskNameRichText.isTruncated)
			{
				this.height = 60;
			}
			else
			{
				this.height = 30;
			}
			this.taskNameRichText.height = this.height;
		}
		
		public function listItemClicked(e:MouseEvent):void
		{
			var parentList:List = owner as List;
			var pred:Predicate = parentList.dataProvider[parentList.selectedIndex].pred;
			gameEngine.hudGroup.storyGoalWindow.hintComponent.setHintText(this.pred, PromWeek.HintComponent.FRESHMAN);
			gameEngine.hudGroup.storyGoalWindow.updateTrueFor(pred);
		}
		
		
		public function invalidateSkinState():void {
			//super.invalidateRendererState();
			//this.invalidate
		}
		
		//textFlow.importFromString("<p>Mike says <span color=\"0x0000FF\">BLUE</span>!!!</p>");
		//myRichText.textFlow = textFlow;
	
	]]>		
	</fx:Script>
	
</s:ItemRenderer>